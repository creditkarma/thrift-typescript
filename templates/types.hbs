//
// Autogenerated by thrift-typescript
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
const thrift = require("thrift");
const Thrift = thrift.Thrift;
const Q = thrift.Q;

{{#each this}}
export class {{upcase name}} {
  public success: boolean;
  {{#each fields}}
  public {{name}}: {{tsType type}};
  {{/each}}

  constructor(args?) {
    {{#each fields}}
    this.{{name}} = null;
    {{/each}}
    if (args) {
      {{#each fields}}
      if (args.{{name}} != null) {
        this.{{name}} = args.{{name}};
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field {{name}} is unset!');
      }
      {{/each}}
    }
  }

  public read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const fname = ret.fname;
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype === Thrift.Type.STOP) {
        break;
      }
      {{#if fields}}
      switch (fid) {
        {{#each fields}}
        case {{id}}:
          if (ftype === Thrift.Type.{{upcase type}}) {
            this.{{name}} = input.read{{upcase type}}();
          } else {
            input.skip(ftype);
          }
          break;
        {{/each}}
        default:
          input.skip(ftype);
      }
      {{else}}
      input.skip(ftype);
      {{/if}}
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  public write(output) {
    output.writeStructBegin("{{upcase name}}");
    {{#each fields}}
    if (this.{{name}} != null) {
      output.writeFieldBegin("{{name}}", Thrift.Type.{{upcase type}}, {{id}});
      output.write{{upcase type}}(this.{{name}});
      output.writeFieldEnd();
    }
    {{/each}}
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
}
{{/each}}
