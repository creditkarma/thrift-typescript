//
// Autogenerated by thrift-typescript
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
const thrift = require("thrift");
const Thrift = thrift.Thrift;
const Q = thrift.Q;


{{#if structs}}
import * as ttypes from './{{fileName}}_types';
{{/if}}

{{#each services}}
// HELPER FUNCTIONS AND STRUCTURES
{{#each methods}}
class {{../name}}{{upcase name}}Args {
  {{#each args}}
  public {{name}}: {{tsType type}};
  {{/each}}

  {{#if args}}
  constructor(args?) {
    {{#each args}}
    this.{{name}} = null;
    {{/each}}
    if (args) {
      {{#each args}}
      if (args.{{name}} != null) {
        {{#if (isStruct type)}}
        this.{{name}} = new {{tsType type}}(args.{{name}});
        {{else}}
        this.{{name}} = args.{{name}};
        {{/if}}
      }
      {{/each}}
    }
  }
  {{/if}}

  public read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const fname = ret.fname;
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype === Thrift.Type.STOP) {
        break;
      }
      {{#if args}}
      switch (fid) {
        {{#each args}}
        case {{id}}:
          if (ftype === Thrift.Type.{{upcase (getStructOrType type)}}) {
            {{#if (isStruct type)}}
            this.{{name}} = new {{tsType type}}();
            this.{{name}}.read(input);
            {{else}}
            this.{{name}} = input.read{{upcase type}}();
            {{/if}}
          } else {
            input.skip(ftype);
          }
          break;
        {{/each}}
        default:
          input.skip(ftype);
      }
      {{else}}
      input.skip(ftype);
      {{/if}}
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  public write(output) {
    output.writeStructBegin("{{../name}}{{upcase name}}Args");
    {{#each args}}
    if (this.{{name}} != null) {
      {{#if (isStruct type)}}
      output.writeFieldBegin("{{name}}", Thrift.Type.STRUCT, {{inc @index}});
      this.{{name}}.write(output);
      {{else}}
      output.writeFieldBegin("{{name}}", Thrift.Type.{{upcase type}}, {{id}});
      output.write{{upcase type}}(this.{{name}});
      {{/if}}
      output.writeFieldEnd();
    }
    {{/each}}
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
}

class {{../name}}{{upcase name}}Result {
  public success: {{tsType type}};

  constructor(args?) {
    this.success;
    if (args) {
      if (args.success != null) {
        this.success = {{getResultType type}};
      }
    }
  }

  public read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const fname = ret.fname;
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype === Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        {{#if type}}
        case 0:
          if (ftype === Thrift.Type.{{upcase (getStructOrType type)}}) {
            {{#if (isStruct type)}}
            this.success = new {{tsType type}}();
            this.success.read(input);
            {{else}}
            this.success = input.read{{upcase type}}();
            {{/if}}
          } else {
            input.skip(ftype);
          }
          break;
        {{else}}
        case 0:
          input.skip(ftype);
          break;
        {{/if}}
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  public write(output) {
    output.writeStructBegin("{{../name}}{{upcase name}}Result");
    if (this.success != null) {
      {{#if (isStruct type)}}
      output.writeFieldBegin("success", Thrift.Type.STRUCT, 0);
      this.success.write(output);
      {{else}}
      output.writeFieldBegin("success", Thrift.Type.{{upcase type}}, 0);
      output.write{{upcase type}}(this.success);
      {{/if}}
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
}
{{/each}}

class {{name}}Client {
  public output;
  public pClass;
  private _seqid;
  private _reqs;

  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }

  public seqid() {
    return this._seqid;
  }

  public new_seqid() {
    return this._seqid += 1;
  }

  {{#each methods}}
  public {{name}}({{#each args}}{{name}}: {{tsType type}}, {{/each}}callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      let defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
         defer.reject(error);
        } else {
         defer.resolve(result);
        }
      };
      this.send_{{name}}({{#each args}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
      return defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_{{name}}({{#each args}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
    }
  }

  public send_{{name}}({{#each args}}{{name}}: {{tsType type}}{{#unless @last}}, {{/unless}}{{/each}}) {
    const output = new this.pClass(this.output);
    output.writeMessageBegin("{{name}}", Thrift.MessageType.CALL, this.seqid());
    const args = new {{../name}}{{upcase name}}Args();
    {{#each args}}
    args.{{name}} = {{name}};
    {{/each}}
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }

  public recv_{{name}} (input, mtype, rseqid) {
    const noop = () => null;
    let callback = this._reqs[rseqid] || noop;
    delete this._reqs[rseqid];
    if (mtype === Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new {{../name}}{{upcase name}}Result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback("{{name}} failed: unknown result");
  }
  {{/each}}
}

class {{name}}Processor {
  private _handler;

  constructor(handler) {
    this._handler = handler;
  }

  public process(input, output) {
    const r = input.readMessageBegin();
    if (this["process_" + r.fname]) {
      return this["process_" + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const err = `Unknown function ${r.fname}`;
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, err);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }

  {{#each methods}}
  public process_{{name}}(seqid, input, output) {
    const args = new {{../name}}{{upcase name}}Args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.{{name}}.length === {{args.length}}) {
      Q.fcall(this._handler.{{name}}{{#each args}}, args.{{name}}{{/each}}).then((data) => {
          const result = new {{../name}}{{upcase name}}Result({success: data});
          output.writeMessageBegin("{{name}}", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, (err) => {
          const result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("{{name}}", Thrift.MessageType.EXCEPTION, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.{{name}}({{#each args}}args.{{name}}, {{/each}}(err, data) => {
        let result;
        if (err == null) {
          result = new {{../name}}{{upcase name}}Result((err != null ? err : {success: data}));
          output.writeMessageBegin("{{name}}", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("{{name}}", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  {{/each}}
}
export { {{name}}Processor as Processor }
export { {{name}}Client as Client }

{{/each}}
