import * as ts from 'typescript'
import thriftParser = require('thrift-parser')

import * as path from 'path'

import readFile from './filesystem/read-file'

import IDLNode from './nodes/IDLNode'

import { resolveIDLs } from './resolve/idls'

import { identifiers as _id } from './ast/identifiers'

export interface IDLFile {
  filename: string
  idl: JsonAST
}

export function parseFile(fileName: string): Promise<IDLFile> {
  return readFile(fileName).then((idl) => {
    const output: IDLFile = {
      filename: path.relative(process.cwd(), fileName),
      idl: thriftParser(idl),
    }
    return output
  })
}

function generateModuleFile(idl: IDLNode) {
  let bodyFile = ts.createSourceFile(`${idl.filename}.ts`, '', ts.ScriptTarget.ES5, false, ts.ScriptKind.TS)
  bodyFile = ts.updateSourceFileNode(bodyFile, [idl.toAST()])

  return bodyFile
}

function generatePreface() {
  let prefaceFile = ts.createSourceFile('preface.ts', '', ts.ScriptTarget.ES5, false, ts.ScriptKind.TS)

  const thriftImport = ts.createImportClause(undefined, ts.createNamedImports([
    ts.createImportSpecifier(undefined, _id.Thrift),
  ]))
  let req = ts.createImportDeclaration(undefined, undefined, thriftImport, ts.createLiteral('thrift'))

  req = ts.addSyntheticLeadingComment(req, ts.SyntaxKind.SingleLineCommentTrivia, '', false)
  req = ts.addSyntheticLeadingComment(req, ts.SyntaxKind.SingleLineCommentTrivia,
    ' Autogenerated by thrift-typescript', false)
  req = ts.addSyntheticLeadingComment(req, ts.SyntaxKind.SingleLineCommentTrivia, '', false)
  req = ts.addSyntheticLeadingComment(req, ts.SyntaxKind.SingleLineCommentTrivia,
    ' DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING', false)
  req = ts.addSyntheticLeadingComment(req, ts.SyntaxKind.SingleLineCommentTrivia, '', true)

  prefaceFile = ts.updateSourceFileNode(prefaceFile, [req])

  return prefaceFile
}

function generateTypescript(files: ts.SourceFile[]) {
  const printer = ts.createPrinter()

  return printer.printBundle(ts.createBundle(files))
}

function getIncludes(file) {
  const includes = file.idl.include || {}
  const dir = path.dirname(file.filename)
  return Object.keys(includes).map((inc) => {
    let filename = file.idl.include[inc].path
    if (!path.extname(filename)) {
      filename = filename + '.thrift'
    }
    return path.resolve(dir, filename)
  })
}

export async function generateIDLTypes(filename: string): Promise<string> {
  const parsed = await parseFile(filename)

  let parsedFiles: IDLFile[] = []

  if (parsed.idl.include) {
    const includes = getIncludes(parsed)
    parsedFiles = await Promise.all(includes.map(parseFile))
  }

  parsedFiles.push(parsed)

  const resolved = resolveIDLs(parsedFiles).map(generateModuleFile)

  const files = [generatePreface()].concat(resolved)

  return generateTypescript(files)
}
