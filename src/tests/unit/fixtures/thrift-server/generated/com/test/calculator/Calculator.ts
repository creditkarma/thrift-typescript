/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v{{VERSION}}
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "test-lib";
import * as __ROOT_NAMESPACE__ from "./../../..";
import * as com_test_operation from "./../operation";
import * as com_test_common from "./../common";
import * as __NAMESPACE__ from "./.";
export const serviceName: string = "Calculator";
export const annotations: thrift.IThriftAnnotations = {};
export const methodAnnotations: thrift.IMethodAnnotations = {
    getStruct: {
        annotations: {},
        fieldAnnotations: {}
    },
    getUnion: {
        annotations: {},
        fieldAnnotations: {}
    },
    getEnum: {
        annotations: {},
        fieldAnnotations: {}
    },
    ping: {
        annotations: {},
        fieldAnnotations: {}
    },
    add: {
        annotations: {},
        fieldAnnotations: {}
    },
    addInt64: {
        annotations: {},
        fieldAnnotations: {}
    },
    addWithContext: {
        annotations: {},
        fieldAnnotations: {}
    },
    calculate: {
        annotations: {},
        fieldAnnotations: {}
    },
    echoBinary: {
        annotations: {},
        fieldAnnotations: {}
    },
    echoString: {
        annotations: {},
        fieldAnnotations: {}
    },
    checkName: {
        annotations: {},
        fieldAnnotations: {}
    },
    checkOptional: {
        annotations: {},
        fieldAnnotations: {}
    },
    mapOneList: {
        annotations: {},
        fieldAnnotations: {}
    },
    mapValues: {
        annotations: {},
        fieldAnnotations: {}
    },
    listToMap: {
        annotations: {},
        fieldAnnotations: {}
    },
    fetchThing: {
        annotations: {},
        fieldAnnotations: {}
    },
    zip: {
        annotations: {},
        fieldAnnotations: {}
    }
};
export const methodNames: Array<string> = ["getStruct", "getUnion", "getEnum", "ping", "add", "addInt64", "addWithContext", "calculate", "echoBinary", "echoString", "checkName", "checkOptional", "mapOneList", "mapValues", "listToMap", "fetchThing", "zip"];
export const methodParameters: { [methodName: string]: number } = {
    getStruct: 2,
    getUnion: 2,
    getEnum: 1,
    ping: 1,
    add: 3,
    addInt64: 3,
    addWithContext: 3,
    calculate: 3,
    echoBinary: 2,
    echoString: 2,
    checkName: 2,
    checkOptional: 2,
    mapOneList: 2,
    mapValues: 2,
    listToMap: 2,
    fetchThing: 1,
    zip: 1
};
export interface IPing__Args {
    __name: "Ping__Args";
}
export interface IPing__ArgsArgs {
}
export const Ping__ArgsCodec: thrift.IStructCodec<IPing__ArgsArgs, IPing__Args> = {
    encode(args: IPing__ArgsArgs, output: thrift.TProtocol): void {
        output.writeStructBegin("Ping__Args");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IPing__Args {
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "Ping__Args"
        };
    }
};
export class Ping__Args extends thrift.StructLike implements IPing__Args {
    public readonly __name = "Ping__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IPing__ArgsArgs = {}) {
        super();
    }
    public static read(input: thrift.TProtocol): Ping__Args {
        return new Ping__Args(Ping__ArgsCodec.decode(input));
    }
    public static write(args: IPing__ArgsArgs, output: thrift.TProtocol): void {
        return Ping__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Ping__ArgsCodec.encode(this, output);
    }
}
export interface IAdd__Args {
    __name: "Add__Args";
    num1: number;
    num2: number;
}
export interface IAdd__ArgsArgs {
    num1: number;
    num2: number;
}
export const Add__ArgsCodec: thrift.IStructCodec<IAdd__ArgsArgs, IAdd__Args> = {
    encode(args: IAdd__ArgsArgs, output: thrift.TProtocol): void {
        const obj = {
            num1: args.num1,
            num2: args.num2
        };
        output.writeStructBegin("Add__Args");
        if (obj.num1 != null) {
            output.writeFieldBegin("num1", thrift.TType.I32, 1);
            output.writeI32(obj.num1);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
        }
        if (obj.num2 != null) {
            output.writeFieldBegin("num2", thrift.TType.I32, 2);
            output.writeI32(obj.num2);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAdd__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.num1 = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: number = input.readI32();
                        _args.num2 = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.num1 !== undefined && _args.num2 !== undefined) {
            return {
                __name: "Add__Args",
                num1: _args.num1,
                num2: _args.num2
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Add__Args from input");
        }
    }
};
export class Add__Args extends thrift.StructLike implements IAdd__Args {
    public num1: number;
    public num2: number;
    public readonly __name = "Add__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAdd__ArgsArgs) {
        super();
        if (args.num1 != null) {
            const value_3: number = args.num1;
            this.num1 = value_3;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
        }
        if (args.num2 != null) {
            const value_4: number = args.num2;
            this.num2 = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Add__Args {
        return new Add__Args(Add__ArgsCodec.decode(input));
    }
    public static write(args: IAdd__ArgsArgs, output: thrift.TProtocol): void {
        return Add__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Add__ArgsCodec.encode(this, output);
    }
}
export interface IAddInt64__Args {
    __name: "AddInt64__Args";
    num1: thrift.Int64;
    num2: thrift.Int64;
}
export interface IAddInt64__ArgsArgs {
    num1: number | string | thrift.Int64;
    num2: number | string | thrift.Int64;
}
export const AddInt64__ArgsCodec: thrift.IStructCodec<IAddInt64__ArgsArgs, IAddInt64__Args> = {
    encode(args: IAddInt64__ArgsArgs, output: thrift.TProtocol): void {
        const obj = {
            num1: (typeof args.num1 === "number" ? new thrift.Int64(args.num1) : typeof args.num1 === "string" ? thrift.Int64.fromDecimalString(args.num1) : args.num1),
            num2: (typeof args.num2 === "number" ? new thrift.Int64(args.num2) : typeof args.num2 === "string" ? thrift.Int64.fromDecimalString(args.num2) : args.num2)
        };
        output.writeStructBegin("AddInt64__Args");
        if (obj.num1 != null) {
            output.writeFieldBegin("num1", thrift.TType.I64, 1);
            output.writeI64((typeof obj.num1 === "number" ? new thrift.Int64(obj.num1) : typeof obj.num1 === "string" ? thrift.Int64.fromDecimalString(obj.num1) : obj.num1));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
        }
        if (obj.num2 != null) {
            output.writeFieldBegin("num2", thrift.TType.I64, 2);
            output.writeI64((typeof obj.num2 === "number" ? new thrift.Int64(obj.num2) : typeof obj.num2 === "string" ? thrift.Int64.fromDecimalString(obj.num2) : obj.num2));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAddInt64__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_5: thrift.Int64 = input.readI64();
                        _args.num1 = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I64) {
                        const value_6: thrift.Int64 = input.readI64();
                        _args.num2 = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.num1 !== undefined && _args.num2 !== undefined) {
            return {
                __name: "AddInt64__Args",
                num1: _args.num1,
                num2: _args.num2
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddInt64__Args from input");
        }
    }
};
export class AddInt64__Args extends thrift.StructLike implements IAddInt64__Args {
    public num1: thrift.Int64;
    public num2: thrift.Int64;
    public readonly __name = "AddInt64__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAddInt64__ArgsArgs) {
        super();
        if (args.num1 != null) {
            const value_7: thrift.Int64 = (typeof args.num1 === "number" ? new thrift.Int64(args.num1) : typeof args.num1 === "string" ? thrift.Int64.fromDecimalString(args.num1) : args.num1);
            this.num1 = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
        }
        if (args.num2 != null) {
            const value_8: thrift.Int64 = (typeof args.num2 === "number" ? new thrift.Int64(args.num2) : typeof args.num2 === "string" ? thrift.Int64.fromDecimalString(args.num2) : args.num2);
            this.num2 = value_8;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): AddInt64__Args {
        return new AddInt64__Args(AddInt64__ArgsCodec.decode(input));
    }
    public static write(args: IAddInt64__ArgsArgs, output: thrift.TProtocol): void {
        return AddInt64__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AddInt64__ArgsCodec.encode(this, output);
    }
}
export interface IAddWithContext__Args {
    __name: "AddWithContext__Args";
    num1: number;
    num2: number;
}
export interface IAddWithContext__ArgsArgs {
    num1: number;
    num2: number;
}
export const AddWithContext__ArgsCodec: thrift.IStructCodec<IAddWithContext__ArgsArgs, IAddWithContext__Args> = {
    encode(args: IAddWithContext__ArgsArgs, output: thrift.TProtocol): void {
        const obj = {
            num1: args.num1,
            num2: args.num2
        };
        output.writeStructBegin("AddWithContext__Args");
        if (obj.num1 != null) {
            output.writeFieldBegin("num1", thrift.TType.I32, 1);
            output.writeI32(obj.num1);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
        }
        if (obj.num2 != null) {
            output.writeFieldBegin("num2", thrift.TType.I32, 2);
            output.writeI32(obj.num2);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAddWithContext__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_9: number = input.readI32();
                        _args.num1 = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_10: number = input.readI32();
                        _args.num2 = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.num1 !== undefined && _args.num2 !== undefined) {
            return {
                __name: "AddWithContext__Args",
                num1: _args.num1,
                num2: _args.num2
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddWithContext__Args from input");
        }
    }
};
export class AddWithContext__Args extends thrift.StructLike implements IAddWithContext__Args {
    public num1: number;
    public num2: number;
    public readonly __name = "AddWithContext__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAddWithContext__ArgsArgs) {
        super();
        if (args.num1 != null) {
            const value_11: number = args.num1;
            this.num1 = value_11;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
        }
        if (args.num2 != null) {
            const value_12: number = args.num2;
            this.num2 = value_12;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): AddWithContext__Args {
        return new AddWithContext__Args(AddWithContext__ArgsCodec.decode(input));
    }
    public static write(args: IAddWithContext__ArgsArgs, output: thrift.TProtocol): void {
        return AddWithContext__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AddWithContext__ArgsCodec.encode(this, output);
    }
}
export interface ICalculate__Args {
    __name: "Calculate__Args";
    logid: number;
    work: __NAMESPACE__.IWork;
}
export interface ICalculate__ArgsArgs {
    logid: number;
    work: __NAMESPACE__.IWorkArgs;
}
export const Calculate__ArgsCodec: thrift.IStructCodec<ICalculate__ArgsArgs, ICalculate__Args> = {
    encode(args: ICalculate__ArgsArgs, output: thrift.TProtocol): void {
        const obj = {
            logid: args.logid,
            work: args.work
        };
        output.writeStructBegin("Calculate__Args");
        if (obj.logid != null) {
            output.writeFieldBegin("logid", thrift.TType.I32, 1);
            output.writeI32(obj.logid);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[logid] is unset!");
        }
        if (obj.work != null) {
            output.writeFieldBegin("work", thrift.TType.STRUCT, 2);
            __NAMESPACE__.WorkCodec.encode(obj.work, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[work] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ICalculate__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_13: number = input.readI32();
                        _args.logid = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_14: __NAMESPACE__.IWork = __NAMESPACE__.WorkCodec.decode(input);
                        _args.work = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.logid !== undefined && _args.work !== undefined) {
            return {
                __name: "Calculate__Args",
                logid: _args.logid,
                work: _args.work
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Calculate__Args from input");
        }
    }
};
export class Calculate__Args extends thrift.StructLike implements ICalculate__Args {
    public logid: number;
    public work: __NAMESPACE__.IWork;
    public readonly __name = "Calculate__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ICalculate__ArgsArgs) {
        super();
        if (args.logid != null) {
            const value_15: number = args.logid;
            this.logid = value_15;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[logid] is unset!");
        }
        if (args.work != null) {
            const value_16: __NAMESPACE__.IWork = new __NAMESPACE__.Work(args.work);
            this.work = value_16;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[work] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Calculate__Args {
        return new Calculate__Args(Calculate__ArgsCodec.decode(input));
    }
    public static write(args: ICalculate__ArgsArgs, output: thrift.TProtocol): void {
        return Calculate__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Calculate__ArgsCodec.encode(this, output);
    }
}
export interface IEchoBinary__Args {
    __name: "EchoBinary__Args";
    word: Buffer;
}
export interface IEchoBinary__ArgsArgs {
    word: string | Buffer;
}
export const EchoBinary__ArgsCodec: thrift.IStructCodec<IEchoBinary__ArgsArgs, IEchoBinary__Args> = {
    encode(args: IEchoBinary__ArgsArgs, output: thrift.TProtocol): void {
        const obj = {
            word: (typeof args.word === "string" ? Buffer.from(args.word) : args.word)
        };
        output.writeStructBegin("EchoBinary__Args");
        if (obj.word != null) {
            output.writeFieldBegin("word", thrift.TType.STRING, 1);
            output.writeBinary(obj.word);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[word] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IEchoBinary__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_17: Buffer = input.readBinary();
                        _args.word = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.word !== undefined) {
            return {
                __name: "EchoBinary__Args",
                word: _args.word
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read EchoBinary__Args from input");
        }
    }
};
export class EchoBinary__Args extends thrift.StructLike implements IEchoBinary__Args {
    public word: Buffer;
    public readonly __name = "EchoBinary__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IEchoBinary__ArgsArgs) {
        super();
        if (args.word != null) {
            const value_18: Buffer = (typeof args.word === "string" ? Buffer.from(args.word) : args.word);
            this.word = value_18;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[word] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): EchoBinary__Args {
        return new EchoBinary__Args(EchoBinary__ArgsCodec.decode(input));
    }
    public static write(args: IEchoBinary__ArgsArgs, output: thrift.TProtocol): void {
        return EchoBinary__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return EchoBinary__ArgsCodec.encode(this, output);
    }
}
export interface IEchoString__Args {
    __name: "EchoString__Args";
    word: string;
}
export interface IEchoString__ArgsArgs {
    word: string;
}
export const EchoString__ArgsCodec: thrift.IStructCodec<IEchoString__ArgsArgs, IEchoString__Args> = {
    encode(args: IEchoString__ArgsArgs, output: thrift.TProtocol): void {
        const obj = {
            word: args.word
        };
        output.writeStructBegin("EchoString__Args");
        if (obj.word != null) {
            output.writeFieldBegin("word", thrift.TType.STRING, 1);
            output.writeString(obj.word);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[word] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IEchoString__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_19: string = input.readString();
                        _args.word = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.word !== undefined) {
            return {
                __name: "EchoString__Args",
                word: _args.word
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read EchoString__Args from input");
        }
    }
};
export class EchoString__Args extends thrift.StructLike implements IEchoString__Args {
    public word: string;
    public readonly __name = "EchoString__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IEchoString__ArgsArgs) {
        super();
        if (args.word != null) {
            const value_20: string = args.word;
            this.word = value_20;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[word] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): EchoString__Args {
        return new EchoString__Args(EchoString__ArgsCodec.decode(input));
    }
    public static write(args: IEchoString__ArgsArgs, output: thrift.TProtocol): void {
        return EchoString__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return EchoString__ArgsCodec.encode(this, output);
    }
}
export interface ICheckName__Args {
    __name: "CheckName__Args";
    choice: __NAMESPACE__.IChoice;
}
export interface ICheckName__ArgsArgs {
    choice: __NAMESPACE__.IChoiceArgs;
}
export const CheckName__ArgsCodec: thrift.IStructCodec<ICheckName__ArgsArgs, ICheckName__Args> = {
    encode(args: ICheckName__ArgsArgs, output: thrift.TProtocol): void {
        const obj = {
            choice: args.choice
        };
        output.writeStructBegin("CheckName__Args");
        if (obj.choice != null) {
            output.writeFieldBegin("choice", thrift.TType.STRUCT, 1);
            __NAMESPACE__.ChoiceCodec.encode(obj.choice, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[choice] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ICheckName__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_21: __NAMESPACE__.IChoice = __NAMESPACE__.ChoiceCodec.decode(input);
                        _args.choice = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.choice !== undefined) {
            return {
                __name: "CheckName__Args",
                choice: _args.choice
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CheckName__Args from input");
        }
    }
};
export class CheckName__Args extends thrift.StructLike implements ICheckName__Args {
    public choice: __NAMESPACE__.IChoice;
    public readonly __name = "CheckName__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ICheckName__ArgsArgs) {
        super();
        if (args.choice != null) {
            const value_22: __NAMESPACE__.IChoice = new __NAMESPACE__.Choice(args.choice);
            this.choice = value_22;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[choice] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): CheckName__Args {
        return new CheckName__Args(CheckName__ArgsCodec.decode(input));
    }
    public static write(args: ICheckName__ArgsArgs, output: thrift.TProtocol): void {
        return CheckName__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return CheckName__ArgsCodec.encode(this, output);
    }
}
export interface ICheckOptional__Args {
    __name: "CheckOptional__Args";
    type?: string;
}
export interface ICheckOptional__ArgsArgs {
    type?: string;
}
export const CheckOptional__ArgsCodec: thrift.IStructCodec<ICheckOptional__ArgsArgs, ICheckOptional__Args> = {
    encode(args: ICheckOptional__ArgsArgs, output: thrift.TProtocol): void {
        const obj = {
            type: args.type
        };
        output.writeStructBegin("CheckOptional__Args");
        if (obj.type != null) {
            output.writeFieldBegin("type", thrift.TType.STRING, 1);
            output.writeString(obj.type);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ICheckOptional__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_23: string = input.readString();
                        _args.type = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "CheckOptional__Args",
            type: _args.type
        };
    }
};
export class CheckOptional__Args extends thrift.StructLike implements ICheckOptional__Args {
    public type?: string;
    public readonly __name = "CheckOptional__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ICheckOptional__ArgsArgs = {}) {
        super();
        if (args.type != null) {
            const value_24: string = args.type;
            this.type = value_24;
        }
    }
    public static read(input: thrift.TProtocol): CheckOptional__Args {
        return new CheckOptional__Args(CheckOptional__ArgsCodec.decode(input));
    }
    public static write(args: ICheckOptional__ArgsArgs, output: thrift.TProtocol): void {
        return CheckOptional__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return CheckOptional__ArgsCodec.encode(this, output);
    }
}
export interface IMapOneList__Args {
    __name: "MapOneList__Args";
    arg: Array<number>;
}
export interface IMapOneList__ArgsArgs {
    arg: Array<number>;
}
export const MapOneList__ArgsCodec: thrift.IStructCodec<IMapOneList__ArgsArgs, IMapOneList__Args> = {
    encode(args: IMapOneList__ArgsArgs, output: thrift.TProtocol): void {
        const obj = {
            arg: args.arg
        };
        output.writeStructBegin("MapOneList__Args");
        if (obj.arg != null) {
            output.writeFieldBegin("arg", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.I32, obj.arg.length);
            obj.arg.forEach((value_25: number): void => {
                output.writeI32(value_25);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IMapOneList__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_26: Array<number> = new Array<number>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_27: number = input.readI32();
                            value_26.push(value_27);
                        }
                        input.readListEnd();
                        _args.arg = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.arg !== undefined) {
            return {
                __name: "MapOneList__Args",
                arg: _args.arg
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read MapOneList__Args from input");
        }
    }
};
export class MapOneList__Args extends thrift.StructLike implements IMapOneList__Args {
    public arg: Array<number>;
    public readonly __name = "MapOneList__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IMapOneList__ArgsArgs) {
        super();
        if (args.arg != null) {
            const value_28: Array<number> = new Array<number>();
            args.arg.forEach((value_29: number): void => {
                const value_30: number = value_29;
                value_28.push(value_30);
            });
            this.arg = value_28;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): MapOneList__Args {
        return new MapOneList__Args(MapOneList__ArgsCodec.decode(input));
    }
    public static write(args: IMapOneList__ArgsArgs, output: thrift.TProtocol): void {
        return MapOneList__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return MapOneList__ArgsCodec.encode(this, output);
    }
}
export interface IMapValues__Args {
    __name: "MapValues__Args";
    arg: Map<string, number>;
}
export interface IMapValues__ArgsArgs {
    arg: Map<string, number>;
}
export const MapValues__ArgsCodec: thrift.IStructCodec<IMapValues__ArgsArgs, IMapValues__Args> = {
    encode(args: IMapValues__ArgsArgs, output: thrift.TProtocol): void {
        const obj = {
            arg: args.arg
        };
        output.writeStructBegin("MapValues__Args");
        if (obj.arg != null) {
            output.writeFieldBegin("arg", thrift.TType.MAP, 1);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.I32, obj.arg.size);
            obj.arg.forEach((value_31: number, key_1: string): void => {
                output.writeString(key_1);
                output.writeI32(value_31);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IMapValues__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.MAP) {
                        const value_32: Map<string, number> = new Map<string, number>();
                        const metadata_2: thrift.IThriftMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_2: string = input.readString();
                            const value_33: number = input.readI32();
                            value_32.set(key_2, value_33);
                        }
                        input.readMapEnd();
                        _args.arg = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.arg !== undefined) {
            return {
                __name: "MapValues__Args",
                arg: _args.arg
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read MapValues__Args from input");
        }
    }
};
export class MapValues__Args extends thrift.StructLike implements IMapValues__Args {
    public arg: Map<string, number>;
    public readonly __name = "MapValues__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IMapValues__ArgsArgs) {
        super();
        if (args.arg != null) {
            const value_34: Map<string, number> = new Map<string, number>();
            args.arg.forEach((value_35: number, key_3: string): void => {
                const value_36: number = value_35;
                const key_4: string = key_3;
                value_34.set(key_4, value_36);
            });
            this.arg = value_34;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): MapValues__Args {
        return new MapValues__Args(MapValues__ArgsCodec.decode(input));
    }
    public static write(args: IMapValues__ArgsArgs, output: thrift.TProtocol): void {
        return MapValues__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return MapValues__ArgsCodec.encode(this, output);
    }
}
export interface IListToMap__Args {
    __name: "ListToMap__Args";
    arg: Array<Array<string>>;
}
export interface IListToMap__ArgsArgs {
    arg: Array<Array<string>>;
}
export const ListToMap__ArgsCodec: thrift.IStructCodec<IListToMap__ArgsArgs, IListToMap__Args> = {
    encode(args: IListToMap__ArgsArgs, output: thrift.TProtocol): void {
        const obj = {
            arg: args.arg
        };
        output.writeStructBegin("ListToMap__Args");
        if (obj.arg != null) {
            output.writeFieldBegin("arg", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.LIST, obj.arg.length);
            obj.arg.forEach((value_37: Array<string>): void => {
                output.writeListBegin(thrift.TType.STRING, value_37.length);
                value_37.forEach((value_38: string): void => {
                    output.writeString(value_38);
                });
                output.writeListEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IListToMap__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_39: Array<Array<string>> = new Array<Array<string>>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_40: Array<string> = new Array<string>();
                            const metadata_4: thrift.IThriftList = input.readListBegin();
                            const size_4: number = metadata_4.size;
                            for (let i_4: number = 0; i_4 < size_4; i_4++) {
                                const value_41: string = input.readString();
                                value_40.push(value_41);
                            }
                            input.readListEnd();
                            value_39.push(value_40);
                        }
                        input.readListEnd();
                        _args.arg = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.arg !== undefined) {
            return {
                __name: "ListToMap__Args",
                arg: _args.arg
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ListToMap__Args from input");
        }
    }
};
export class ListToMap__Args extends thrift.StructLike implements IListToMap__Args {
    public arg: Array<Array<string>>;
    public readonly __name = "ListToMap__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IListToMap__ArgsArgs) {
        super();
        if (args.arg != null) {
            const value_42: Array<Array<string>> = new Array<Array<string>>();
            args.arg.forEach((value_43: Array<string>): void => {
                const value_44: Array<string> = new Array<string>();
                value_43.forEach((value_45: string): void => {
                    const value_46: string = value_45;
                    value_44.push(value_46);
                });
                value_42.push(value_44);
            });
            this.arg = value_42;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): ListToMap__Args {
        return new ListToMap__Args(ListToMap__ArgsCodec.decode(input));
    }
    public static write(args: IListToMap__ArgsArgs, output: thrift.TProtocol): void {
        return ListToMap__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ListToMap__ArgsCodec.encode(this, output);
    }
}
export interface IFetchThing__Args {
    __name: "FetchThing__Args";
}
export interface IFetchThing__ArgsArgs {
}
export const FetchThing__ArgsCodec: thrift.IStructCodec<IFetchThing__ArgsArgs, IFetchThing__Args> = {
    encode(args: IFetchThing__ArgsArgs, output: thrift.TProtocol): void {
        output.writeStructBegin("FetchThing__Args");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IFetchThing__Args {
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "FetchThing__Args"
        };
    }
};
export class FetchThing__Args extends thrift.StructLike implements IFetchThing__Args {
    public readonly __name = "FetchThing__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IFetchThing__ArgsArgs = {}) {
        super();
    }
    public static read(input: thrift.TProtocol): FetchThing__Args {
        return new FetchThing__Args(FetchThing__ArgsCodec.decode(input));
    }
    public static write(args: IFetchThing__ArgsArgs, output: thrift.TProtocol): void {
        return FetchThing__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return FetchThing__ArgsCodec.encode(this, output);
    }
}
export interface IZip__Args {
    __name: "Zip__Args";
}
export interface IZip__ArgsArgs {
}
export const Zip__ArgsCodec: thrift.IStructCodec<IZip__ArgsArgs, IZip__Args> = {
    encode(args: IZip__ArgsArgs, output: thrift.TProtocol): void {
        output.writeStructBegin("Zip__Args");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IZip__Args {
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "Zip__Args"
        };
    }
};
export class Zip__Args extends thrift.StructLike implements IZip__Args {
    public readonly __name = "Zip__Args";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IZip__ArgsArgs = {}) {
        super();
    }
    public static read(input: thrift.TProtocol): Zip__Args {
        return new Zip__Args(Zip__ArgsCodec.decode(input));
    }
    public static write(args: IZip__ArgsArgs, output: thrift.TProtocol): void {
        return Zip__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Zip__ArgsCodec.encode(this, output);
    }
}
export interface IPing__Result {
    __name: "Ping__Result";
    success?: void;
}
export interface IPing__ResultArgs {
    success?: void;
}
export const Ping__ResultCodec: thrift.IStructCodec<IPing__ResultArgs, IPing__Result> = {
    encode(args: IPing__ResultArgs, output: thrift.TProtocol): void {
        output.writeStructBegin("Ping__Result");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IPing__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.VOID) {
                        input.skip(fieldType);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "Ping__Result",
            success: _args.success
        };
    }
};
export class Ping__Result extends thrift.StructLike implements IPing__Result {
    public success?: void;
    public readonly __name = "Ping__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IPing__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_47: void = undefined;
            this.success = value_47;
        }
    }
    public static read(input: thrift.TProtocol): Ping__Result {
        return new Ping__Result(Ping__ResultCodec.decode(input));
    }
    public static write(args: IPing__ResultArgs, output: thrift.TProtocol): void {
        return Ping__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Ping__ResultCodec.encode(this, output);
    }
}
export interface IAdd__Result {
    __name: "Add__Result";
    success?: number;
    exp?: com_test_operation.IJankyResult;
}
export interface IAdd__ResultArgs {
    success?: number;
    exp?: com_test_operation.IJankyResultArgs;
}
export const Add__ResultCodec: thrift.IStructCodec<IAdd__ResultArgs, IAdd__Result> = {
    encode(args: IAdd__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: args.success,
            exp: args.exp
        };
        output.writeStructBegin("Add__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.I32, 0);
            output.writeI32(obj.success);
            output.writeFieldEnd();
        }
        if (obj.exp != null) {
            output.writeFieldBegin("exp", thrift.TType.STRUCT, 1);
            com_test_operation.JankyResultCodec.encode(obj.exp, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAdd__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.I32) {
                        const value_48: number = input.readI32();
                        _args.success = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_49: com_test_operation.IJankyResult = com_test_operation.JankyResultCodec.decode(input);
                        _args.exp = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "Add__Result",
            success: _args.success,
            exp: _args.exp
        };
    }
};
export class Add__Result extends thrift.StructLike implements IAdd__Result {
    public success?: number;
    public exp?: com_test_operation.IJankyResult;
    public readonly __name = "Add__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAdd__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_50: number = args.success;
            this.success = value_50;
        }
        if (args.exp != null) {
            const value_51: com_test_operation.IJankyResult = new com_test_operation.JankyResult(args.exp);
            this.exp = value_51;
        }
    }
    public static read(input: thrift.TProtocol): Add__Result {
        return new Add__Result(Add__ResultCodec.decode(input));
    }
    public static write(args: IAdd__ResultArgs, output: thrift.TProtocol): void {
        return Add__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Add__ResultCodec.encode(this, output);
    }
}
export interface IAddInt64__Result {
    __name: "AddInt64__Result";
    success?: thrift.Int64;
    exp?: __NAMESPACE__.INotAGoodIdea;
}
export interface IAddInt64__ResultArgs {
    success?: number | string | thrift.Int64;
    exp?: __NAMESPACE__.INotAGoodIdeaArgs;
}
export const AddInt64__ResultCodec: thrift.IStructCodec<IAddInt64__ResultArgs, IAddInt64__Result> = {
    encode(args: IAddInt64__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: (typeof args.success === "number" ? new thrift.Int64(args.success) : typeof args.success === "string" ? thrift.Int64.fromDecimalString(args.success) : args.success),
            exp: args.exp
        };
        output.writeStructBegin("AddInt64__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.I64, 0);
            output.writeI64((typeof obj.success === "number" ? new thrift.Int64(obj.success) : typeof obj.success === "string" ? thrift.Int64.fromDecimalString(obj.success) : obj.success));
            output.writeFieldEnd();
        }
        if (obj.exp != null) {
            output.writeFieldBegin("exp", thrift.TType.STRUCT, 1);
            __NAMESPACE__.NotAGoodIdeaCodec.encode(obj.exp, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAddInt64__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.I64) {
                        const value_52: thrift.Int64 = input.readI64();
                        _args.success = value_52;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_53: __NAMESPACE__.INotAGoodIdea = __NAMESPACE__.NotAGoodIdeaCodec.decode(input);
                        _args.exp = value_53;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "AddInt64__Result",
            success: _args.success,
            exp: _args.exp
        };
    }
};
export class AddInt64__Result extends thrift.StructLike implements IAddInt64__Result {
    public success?: thrift.Int64;
    public exp?: __NAMESPACE__.INotAGoodIdea;
    public readonly __name = "AddInt64__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAddInt64__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_54: thrift.Int64 = (typeof args.success === "number" ? new thrift.Int64(args.success) : typeof args.success === "string" ? thrift.Int64.fromDecimalString(args.success) : args.success);
            this.success = value_54;
        }
        if (args.exp != null) {
            const value_55: __NAMESPACE__.INotAGoodIdea = new __NAMESPACE__.NotAGoodIdea(args.exp);
            this.exp = value_55;
        }
    }
    public static read(input: thrift.TProtocol): AddInt64__Result {
        return new AddInt64__Result(AddInt64__ResultCodec.decode(input));
    }
    public static write(args: IAddInt64__ResultArgs, output: thrift.TProtocol): void {
        return AddInt64__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AddInt64__ResultCodec.encode(this, output);
    }
}
export interface IAddWithContext__Result {
    __name: "AddWithContext__Result";
    success?: number;
}
export interface IAddWithContext__ResultArgs {
    success?: number;
}
export const AddWithContext__ResultCodec: thrift.IStructCodec<IAddWithContext__ResultArgs, IAddWithContext__Result> = {
    encode(args: IAddWithContext__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: args.success
        };
        output.writeStructBegin("AddWithContext__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.I32, 0);
            output.writeI32(obj.success);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAddWithContext__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.I32) {
                        const value_56: number = input.readI32();
                        _args.success = value_56;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "AddWithContext__Result",
            success: _args.success
        };
    }
};
export class AddWithContext__Result extends thrift.StructLike implements IAddWithContext__Result {
    public success?: number;
    public readonly __name = "AddWithContext__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAddWithContext__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_57: number = args.success;
            this.success = value_57;
        }
    }
    public static read(input: thrift.TProtocol): AddWithContext__Result {
        return new AddWithContext__Result(AddWithContext__ResultCodec.decode(input));
    }
    public static write(args: IAddWithContext__ResultArgs, output: thrift.TProtocol): void {
        return AddWithContext__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AddWithContext__ResultCodec.encode(this, output);
    }
}
export interface ICalculate__Result {
    __name: "Calculate__Result";
    success?: number;
    ouch?: com_test_operation.IJankyOperation;
}
export interface ICalculate__ResultArgs {
    success?: number;
    ouch?: com_test_operation.IJankyOperationArgs;
}
export const Calculate__ResultCodec: thrift.IStructCodec<ICalculate__ResultArgs, ICalculate__Result> = {
    encode(args: ICalculate__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: args.success,
            ouch: args.ouch
        };
        output.writeStructBegin("Calculate__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.I32, 0);
            output.writeI32(obj.success);
            output.writeFieldEnd();
        }
        if (obj.ouch != null) {
            output.writeFieldBegin("ouch", thrift.TType.STRUCT, 1);
            com_test_operation.JankyOperationCodec.encode(obj.ouch, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ICalculate__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.I32) {
                        const value_58: number = input.readI32();
                        _args.success = value_58;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_59: com_test_operation.IJankyOperation = com_test_operation.JankyOperationCodec.decode(input);
                        _args.ouch = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "Calculate__Result",
            success: _args.success,
            ouch: _args.ouch
        };
    }
};
export class Calculate__Result extends thrift.StructLike implements ICalculate__Result {
    public success?: number;
    public ouch?: com_test_operation.IJankyOperation;
    public readonly __name = "Calculate__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ICalculate__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_60: number = args.success;
            this.success = value_60;
        }
        if (args.ouch != null) {
            const value_61: com_test_operation.IJankyOperation = new com_test_operation.JankyOperation(args.ouch);
            this.ouch = value_61;
        }
    }
    public static read(input: thrift.TProtocol): Calculate__Result {
        return new Calculate__Result(Calculate__ResultCodec.decode(input));
    }
    public static write(args: ICalculate__ResultArgs, output: thrift.TProtocol): void {
        return Calculate__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Calculate__ResultCodec.encode(this, output);
    }
}
export interface IEchoBinary__Result {
    __name: "EchoBinary__Result";
    success?: string;
}
export interface IEchoBinary__ResultArgs {
    success?: string;
}
export const EchoBinary__ResultCodec: thrift.IStructCodec<IEchoBinary__ResultArgs, IEchoBinary__Result> = {
    encode(args: IEchoBinary__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: args.success
        };
        output.writeStructBegin("EchoBinary__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.STRING, 0);
            output.writeString(obj.success);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IEchoBinary__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.STRING) {
                        const value_62: string = input.readString();
                        _args.success = value_62;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "EchoBinary__Result",
            success: _args.success
        };
    }
};
export class EchoBinary__Result extends thrift.StructLike implements IEchoBinary__Result {
    public success?: string;
    public readonly __name = "EchoBinary__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IEchoBinary__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_63: string = args.success;
            this.success = value_63;
        }
    }
    public static read(input: thrift.TProtocol): EchoBinary__Result {
        return new EchoBinary__Result(EchoBinary__ResultCodec.decode(input));
    }
    public static write(args: IEchoBinary__ResultArgs, output: thrift.TProtocol): void {
        return EchoBinary__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return EchoBinary__ResultCodec.encode(this, output);
    }
}
export interface IEchoString__Result {
    __name: "EchoString__Result";
    success?: string;
}
export interface IEchoString__ResultArgs {
    success?: string;
}
export const EchoString__ResultCodec: thrift.IStructCodec<IEchoString__ResultArgs, IEchoString__Result> = {
    encode(args: IEchoString__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: args.success
        };
        output.writeStructBegin("EchoString__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.STRING, 0);
            output.writeString(obj.success);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IEchoString__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.STRING) {
                        const value_64: string = input.readString();
                        _args.success = value_64;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "EchoString__Result",
            success: _args.success
        };
    }
};
export class EchoString__Result extends thrift.StructLike implements IEchoString__Result {
    public success?: string;
    public readonly __name = "EchoString__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IEchoString__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_65: string = args.success;
            this.success = value_65;
        }
    }
    public static read(input: thrift.TProtocol): EchoString__Result {
        return new EchoString__Result(EchoString__ResultCodec.decode(input));
    }
    public static write(args: IEchoString__ResultArgs, output: thrift.TProtocol): void {
        return EchoString__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return EchoString__ResultCodec.encode(this, output);
    }
}
export interface ICheckName__Result {
    __name: "CheckName__Result";
    success?: string;
}
export interface ICheckName__ResultArgs {
    success?: string;
}
export const CheckName__ResultCodec: thrift.IStructCodec<ICheckName__ResultArgs, ICheckName__Result> = {
    encode(args: ICheckName__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: args.success
        };
        output.writeStructBegin("CheckName__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.STRING, 0);
            output.writeString(obj.success);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ICheckName__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.STRING) {
                        const value_66: string = input.readString();
                        _args.success = value_66;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "CheckName__Result",
            success: _args.success
        };
    }
};
export class CheckName__Result extends thrift.StructLike implements ICheckName__Result {
    public success?: string;
    public readonly __name = "CheckName__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ICheckName__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_67: string = args.success;
            this.success = value_67;
        }
    }
    public static read(input: thrift.TProtocol): CheckName__Result {
        return new CheckName__Result(CheckName__ResultCodec.decode(input));
    }
    public static write(args: ICheckName__ResultArgs, output: thrift.TProtocol): void {
        return CheckName__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return CheckName__ResultCodec.encode(this, output);
    }
}
export interface ICheckOptional__Result {
    __name: "CheckOptional__Result";
    success?: string;
}
export interface ICheckOptional__ResultArgs {
    success?: string;
}
export const CheckOptional__ResultCodec: thrift.IStructCodec<ICheckOptional__ResultArgs, ICheckOptional__Result> = {
    encode(args: ICheckOptional__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: args.success
        };
        output.writeStructBegin("CheckOptional__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.STRING, 0);
            output.writeString(obj.success);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ICheckOptional__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.STRING) {
                        const value_68: string = input.readString();
                        _args.success = value_68;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "CheckOptional__Result",
            success: _args.success
        };
    }
};
export class CheckOptional__Result extends thrift.StructLike implements ICheckOptional__Result {
    public success?: string;
    public readonly __name = "CheckOptional__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ICheckOptional__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_69: string = args.success;
            this.success = value_69;
        }
    }
    public static read(input: thrift.TProtocol): CheckOptional__Result {
        return new CheckOptional__Result(CheckOptional__ResultCodec.decode(input));
    }
    public static write(args: ICheckOptional__ResultArgs, output: thrift.TProtocol): void {
        return CheckOptional__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return CheckOptional__ResultCodec.encode(this, output);
    }
}
export interface IMapOneList__Result {
    __name: "MapOneList__Result";
    success?: Array<number>;
}
export interface IMapOneList__ResultArgs {
    success?: Array<number>;
}
export const MapOneList__ResultCodec: thrift.IStructCodec<IMapOneList__ResultArgs, IMapOneList__Result> = {
    encode(args: IMapOneList__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: args.success
        };
        output.writeStructBegin("MapOneList__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.LIST, 0);
            output.writeListBegin(thrift.TType.I32, obj.success.length);
            obj.success.forEach((value_70: number): void => {
                output.writeI32(value_70);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IMapOneList__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.LIST) {
                        const value_71: Array<number> = new Array<number>();
                        const metadata_5: thrift.IThriftList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_72: number = input.readI32();
                            value_71.push(value_72);
                        }
                        input.readListEnd();
                        _args.success = value_71;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "MapOneList__Result",
            success: _args.success
        };
    }
};
export class MapOneList__Result extends thrift.StructLike implements IMapOneList__Result {
    public success?: Array<number>;
    public readonly __name = "MapOneList__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IMapOneList__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_73: Array<number> = new Array<number>();
            args.success.forEach((value_74: number): void => {
                const value_75: number = value_74;
                value_73.push(value_75);
            });
            this.success = value_73;
        }
    }
    public static read(input: thrift.TProtocol): MapOneList__Result {
        return new MapOneList__Result(MapOneList__ResultCodec.decode(input));
    }
    public static write(args: IMapOneList__ResultArgs, output: thrift.TProtocol): void {
        return MapOneList__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return MapOneList__ResultCodec.encode(this, output);
    }
}
export interface IMapValues__Result {
    __name: "MapValues__Result";
    success?: Array<number>;
}
export interface IMapValues__ResultArgs {
    success?: Array<number>;
}
export const MapValues__ResultCodec: thrift.IStructCodec<IMapValues__ResultArgs, IMapValues__Result> = {
    encode(args: IMapValues__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: args.success
        };
        output.writeStructBegin("MapValues__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.LIST, 0);
            output.writeListBegin(thrift.TType.I32, obj.success.length);
            obj.success.forEach((value_76: number): void => {
                output.writeI32(value_76);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IMapValues__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.LIST) {
                        const value_77: Array<number> = new Array<number>();
                        const metadata_6: thrift.IThriftList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_78: number = input.readI32();
                            value_77.push(value_78);
                        }
                        input.readListEnd();
                        _args.success = value_77;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "MapValues__Result",
            success: _args.success
        };
    }
};
export class MapValues__Result extends thrift.StructLike implements IMapValues__Result {
    public success?: Array<number>;
    public readonly __name = "MapValues__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IMapValues__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_79: Array<number> = new Array<number>();
            args.success.forEach((value_80: number): void => {
                const value_81: number = value_80;
                value_79.push(value_81);
            });
            this.success = value_79;
        }
    }
    public static read(input: thrift.TProtocol): MapValues__Result {
        return new MapValues__Result(MapValues__ResultCodec.decode(input));
    }
    public static write(args: IMapValues__ResultArgs, output: thrift.TProtocol): void {
        return MapValues__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return MapValues__ResultCodec.encode(this, output);
    }
}
export interface IListToMap__Result {
    __name: "ListToMap__Result";
    success?: Map<string, string>;
}
export interface IListToMap__ResultArgs {
    success?: Map<string, string>;
}
export const ListToMap__ResultCodec: thrift.IStructCodec<IListToMap__ResultArgs, IListToMap__Result> = {
    encode(args: IListToMap__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: args.success
        };
        output.writeStructBegin("ListToMap__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.MAP, 0);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, obj.success.size);
            obj.success.forEach((value_82: string, key_5: string): void => {
                output.writeString(key_5);
                output.writeString(value_82);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IListToMap__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.MAP) {
                        const value_83: Map<string, string> = new Map<string, string>();
                        const metadata_7: thrift.IThriftMap = input.readMapBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const key_6: string = input.readString();
                            const value_84: string = input.readString();
                            value_83.set(key_6, value_84);
                        }
                        input.readMapEnd();
                        _args.success = value_83;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "ListToMap__Result",
            success: _args.success
        };
    }
};
export class ListToMap__Result extends thrift.StructLike implements IListToMap__Result {
    public success?: Map<string, string>;
    public readonly __name = "ListToMap__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IListToMap__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_85: Map<string, string> = new Map<string, string>();
            args.success.forEach((value_86: string, key_7: string): void => {
                const value_87: string = value_86;
                const key_8: string = key_7;
                value_85.set(key_8, value_87);
            });
            this.success = value_85;
        }
    }
    public static read(input: thrift.TProtocol): ListToMap__Result {
        return new ListToMap__Result(ListToMap__ResultCodec.decode(input));
    }
    public static write(args: IListToMap__ResultArgs, output: thrift.TProtocol): void {
        return ListToMap__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ListToMap__ResultCodec.encode(this, output);
    }
}
export interface IFetchThing__Result {
    __name: "FetchThing__Result";
    success?: com_test_common.ICommonStruct;
}
export interface IFetchThing__ResultArgs {
    success?: com_test_common.ICommonStructArgs;
}
export const FetchThing__ResultCodec: thrift.IStructCodec<IFetchThing__ResultArgs, IFetchThing__Result> = {
    encode(args: IFetchThing__ResultArgs, output: thrift.TProtocol): void {
        const obj = {
            success: args.success
        };
        output.writeStructBegin("FetchThing__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.STRUCT, 0);
            com_test_common.CommonStructCodec.encode(obj.success, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IFetchThing__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_88: com_test_common.ICommonStruct = com_test_common.CommonStructCodec.decode(input);
                        _args.success = value_88;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "FetchThing__Result",
            success: _args.success
        };
    }
};
export class FetchThing__Result extends thrift.StructLike implements IFetchThing__Result {
    public success?: com_test_common.ICommonStruct;
    public readonly __name = "FetchThing__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IFetchThing__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_89: com_test_common.ICommonStruct = new com_test_common.CommonStruct(args.success);
            this.success = value_89;
        }
    }
    public static read(input: thrift.TProtocol): FetchThing__Result {
        return new FetchThing__Result(FetchThing__ResultCodec.decode(input));
    }
    public static write(args: IFetchThing__ResultArgs, output: thrift.TProtocol): void {
        return FetchThing__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return FetchThing__ResultCodec.encode(this, output);
    }
}
export interface IZip__Result {
    __name: "Zip__Result";
    success?: void;
}
export interface IZip__ResultArgs {
    success?: void;
}
export const Zip__ResultCodec: thrift.IStructCodec<IZip__ResultArgs, IZip__Result> = {
    encode(args: IZip__ResultArgs, output: thrift.TProtocol): void {
        output.writeStructBegin("Zip__Result");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IZip__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.VOID) {
                        input.skip(fieldType);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            __name: "Zip__Result",
            success: _args.success
        };
    }
};
export class Zip__Result extends thrift.StructLike implements IZip__Result {
    public success?: void;
    public readonly __name = "Zip__Result";
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IZip__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_90: void = undefined;
            this.success = value_90;
        }
    }
    public static read(input: thrift.TProtocol): Zip__Result {
        return new Zip__Result(Zip__ResultCodec.decode(input));
    }
    public static write(args: IZip__ResultArgs, output: thrift.TProtocol): void {
        return Zip__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Zip__ResultCodec.encode(this, output);
    }
}
export class Client<Context = any> extends __ROOT_NAMESPACE__.SharedService.Client<Context> {
    public static readonly serviceName: string = serviceName;
    public static readonly annotations: thrift.IThriftAnnotations = annotations;
    public static readonly methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public static readonly methodNames: Array<string> = methodNames;
    public static readonly methodParameters: { [methodName: string]: number } = methodParameters;
    public readonly _serviceName: string = serviceName;
    public readonly _annotations: thrift.IThriftAnnotations = annotations;
    public readonly _methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public readonly _methodNames: Array<string> = methodNames;
    public readonly _methodParameters: { [methodName: string]: number } = methodParameters;
    constructor(connection: thrift.IThriftConnection<Context>) {
        super(connection);
    }
    public ping(context?: Context): Promise<void> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("ping", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IPing__ArgsArgs = {};
        Ping__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "ping") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IPing__Result = Ping__ResultCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.resolve(result.success);
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public add(num1: number, num2: number, context?: Context): Promise<number> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("add", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IAdd__ArgsArgs = { num1, num2 };
        Add__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "add") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IAdd__Result = Add__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.exp != null) {
                            return Promise.reject(result.exp);
                        }
                        else if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "add failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public addInt64(num1: number | string | thrift.Int64, num2: number | string | thrift.Int64, context?: Context): Promise<thrift.Int64> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("addInt64", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IAddInt64__ArgsArgs = { num1, num2 };
        AddInt64__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "addInt64") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IAddInt64__Result = AddInt64__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.exp != null) {
                            return Promise.reject(result.exp);
                        }
                        else if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "addInt64 failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public addWithContext(num1: number, num2: number, context?: Context): Promise<number> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("addWithContext", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IAddWithContext__ArgsArgs = { num1, num2 };
        AddWithContext__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "addWithContext") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IAddWithContext__Result = AddWithContext__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "addWithContext failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public calculate(logid: number, work: __NAMESPACE__.IWorkArgs, context?: Context): Promise<number> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("calculate", thrift.MessageType.CALL, this.incrementRequestId());
        const args: ICalculate__ArgsArgs = { logid, work };
        Calculate__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "calculate") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: ICalculate__Result = Calculate__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.ouch != null) {
                            return Promise.reject(result.ouch);
                        }
                        else if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "calculate failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public echoBinary(word: string | Buffer, context?: Context): Promise<string> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("echoBinary", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IEchoBinary__ArgsArgs = { word };
        EchoBinary__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "echoBinary") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IEchoBinary__Result = EchoBinary__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "echoBinary failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public echoString(word: string, context?: Context): Promise<string> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("echoString", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IEchoString__ArgsArgs = { word };
        EchoString__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "echoString") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IEchoString__Result = EchoString__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "echoString failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public checkName(choice: __NAMESPACE__.IChoiceArgs, context?: Context): Promise<string> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("checkName", thrift.MessageType.CALL, this.incrementRequestId());
        const args: ICheckName__ArgsArgs = { choice };
        CheckName__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "checkName") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: ICheckName__Result = CheckName__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "checkName failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public checkOptional(type?: string, context?: Context): Promise<string> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("checkOptional", thrift.MessageType.CALL, this.incrementRequestId());
        const args: ICheckOptional__ArgsArgs = { type };
        CheckOptional__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "checkOptional") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: ICheckOptional__Result = CheckOptional__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "checkOptional failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public mapOneList(arg: Array<number>, context?: Context): Promise<Array<number>> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("mapOneList", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IMapOneList__ArgsArgs = { arg };
        MapOneList__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "mapOneList") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IMapOneList__Result = MapOneList__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "mapOneList failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public mapValues(arg: Map<string, number>, context?: Context): Promise<Array<number>> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("mapValues", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IMapValues__ArgsArgs = { arg };
        MapValues__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "mapValues") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IMapValues__Result = MapValues__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "mapValues failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public listToMap(arg: Array<Array<string>>, context?: Context): Promise<Map<string, string>> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("listToMap", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IListToMap__ArgsArgs = { arg };
        ListToMap__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "listToMap") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IListToMap__Result = ListToMap__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "listToMap failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public fetchThing(context?: Context): Promise<com_test_common.ICommonStruct> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("fetchThing", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IFetchThing__ArgsArgs = {};
        FetchThing__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "fetchThing") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IFetchThing__Result = FetchThing__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "fetchThing failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public zip(context?: Context): Promise<void> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("zip", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IZip__ArgsArgs = {};
        Zip__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "zip") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IZip__Result = Zip__ResultCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.resolve(result.success);
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
}
export interface ILocalHandler<Context = any> {
    ping(context?: Context): void | Promise<void>;
    add(num1: number, num2: number, context?: Context): number | Promise<number>;
    addInt64(num1: thrift.Int64, num2: thrift.Int64, context?: Context): (number | string | thrift.Int64) | Promise<number | string | thrift.Int64>;
    addWithContext(num1: number, num2: number, context?: Context): number | Promise<number>;
    calculate(logid: number, work: __NAMESPACE__.IWork, context?: Context): number | Promise<number>;
    echoBinary(word: Buffer, context?: Context): string | Promise<string>;
    echoString(word: string, context?: Context): string | Promise<string>;
    checkName(choice: __NAMESPACE__.IChoice, context?: Context): string | Promise<string>;
    checkOptional(type?: string, context?: Context): string | Promise<string>;
    mapOneList(arg: Array<number>, context?: Context): Array<number> | Promise<Array<number>>;
    mapValues(arg: Map<string, number>, context?: Context): Array<number> | Promise<Array<number>>;
    listToMap(arg: Array<Array<string>>, context?: Context): Map<string, string> | Promise<Map<string, string>>;
    fetchThing(context?: Context): com_test_common.ICommonStructArgs | Promise<com_test_common.ICommonStructArgs>;
    zip(context?: Context): void | Promise<void>;
}
export type IHandler<Context = any> = ILocalHandler<Context> & __ROOT_NAMESPACE__.SharedService.IHandler<Context>;
export class Processor<Context = any> extends __ROOT_NAMESPACE__.SharedService.Processor<Context> {
    protected readonly _handler: IHandler<Context>;
    public static readonly serviceName: string = serviceName;
    public static readonly annotations: thrift.IThriftAnnotations = annotations;
    public static readonly methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public static readonly methodNames: Array<string> = methodNames;
    public readonly _serviceName: string = serviceName;
    public readonly _annotations: thrift.IThriftAnnotations = annotations;
    public readonly _methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public readonly _methodNames: Array<string> = methodNames;
    constructor(handler: IHandler<Context>) {
        super({
            getStruct: handler.getStruct,
            getUnion: handler.getUnion,
            getEnum: handler.getEnum
        });
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<Buffer>((resolve, reject): void => {
            const metadata: thrift.IThriftMessage = input.readMessageBegin();
            const fieldName: string = metadata.fieldName;
            const requestId: number = metadata.requestId;
            const methodName: string = "process_" + fieldName;
            switch (methodName) {
                case "process_getStruct": {
                    resolve(this.process_getStruct(requestId, input, output, context));
                    break;
                }
                case "process_getUnion": {
                    resolve(this.process_getUnion(requestId, input, output, context));
                    break;
                }
                case "process_getEnum": {
                    resolve(this.process_getEnum(requestId, input, output, context));
                    break;
                }
                case "process_ping": {
                    resolve(this.process_ping(requestId, input, output, context));
                    break;
                }
                case "process_add": {
                    resolve(this.process_add(requestId, input, output, context));
                    break;
                }
                case "process_addInt64": {
                    resolve(this.process_addInt64(requestId, input, output, context));
                    break;
                }
                case "process_addWithContext": {
                    resolve(this.process_addWithContext(requestId, input, output, context));
                    break;
                }
                case "process_calculate": {
                    resolve(this.process_calculate(requestId, input, output, context));
                    break;
                }
                case "process_echoBinary": {
                    resolve(this.process_echoBinary(requestId, input, output, context));
                    break;
                }
                case "process_echoString": {
                    resolve(this.process_echoString(requestId, input, output, context));
                    break;
                }
                case "process_checkName": {
                    resolve(this.process_checkName(requestId, input, output, context));
                    break;
                }
                case "process_checkOptional": {
                    resolve(this.process_checkOptional(requestId, input, output, context));
                    break;
                }
                case "process_mapOneList": {
                    resolve(this.process_mapOneList(requestId, input, output, context));
                    break;
                }
                case "process_mapValues": {
                    resolve(this.process_mapValues(requestId, input, output, context));
                    break;
                }
                case "process_listToMap": {
                    resolve(this.process_listToMap(requestId, input, output, context));
                    break;
                }
                case "process_fetchThing": {
                    resolve(this.process_fetchThing(requestId, input, output, context));
                    break;
                }
                case "process_zip": {
                    resolve(this.process_zip(requestId, input, output, context));
                    break;
                }
                default: {
                    input.skip(thrift.TType.STRUCT);
                    input.readMessageEnd();
                    const errMessage = "Unknown function " + fieldName;
                    const err = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                    output.writeMessageBegin(fieldName, thrift.MessageType.EXCEPTION, requestId);
                    thrift.TApplicationExceptionCodec.encode(err, output);
                    output.writeMessageEnd();
                    resolve(output.flush());
                    break;
                }
            }
        });
    }
    public process_ping(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<void>((resolve, reject): void => {
            try {
                input.readMessageEnd();
                resolve(this._handler.ping(context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: void): Buffer => {
            const result: IPing__ResultArgs = { success: data };
            output.writeMessageBegin("ping", thrift.MessageType.REPLY, requestId);
            Ping__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("ping", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
    public process_add(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<number>((resolve, reject): void => {
            try {
                const args: IAdd__Args = Add__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.add(args.num1, args.num2, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): Buffer => {
            const result: IAdd__ResultArgs = { success: data };
            output.writeMessageBegin("add", thrift.MessageType.REPLY, requestId);
            Add__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            if (err instanceof com_test_operation.JankyResult) {
                const result: IAdd__ResultArgs = { exp: err };
                output.writeMessageBegin("add", thrift.MessageType.REPLY, requestId);
                Add__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }
            else {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("add", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }
        });
    }
    public process_addInt64(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<number | string | thrift.Int64>((resolve, reject): void => {
            try {
                const args: IAddInt64__Args = AddInt64__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.addInt64(args.num1, args.num2, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number | string | thrift.Int64): Buffer => {
            const result: IAddInt64__ResultArgs = { success: data };
            output.writeMessageBegin("addInt64", thrift.MessageType.REPLY, requestId);
            AddInt64__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            if (err instanceof __NAMESPACE__.NotAGoodIdea) {
                const result: IAddInt64__ResultArgs = { exp: err };
                output.writeMessageBegin("addInt64", thrift.MessageType.REPLY, requestId);
                AddInt64__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }
            else {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addInt64", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }
        });
    }
    public process_addWithContext(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<number>((resolve, reject): void => {
            try {
                const args: IAddWithContext__Args = AddWithContext__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.addWithContext(args.num1, args.num2, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): Buffer => {
            const result: IAddWithContext__ResultArgs = { success: data };
            output.writeMessageBegin("addWithContext", thrift.MessageType.REPLY, requestId);
            AddWithContext__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("addWithContext", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
    public process_calculate(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<number>((resolve, reject): void => {
            try {
                const args: ICalculate__Args = Calculate__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.calculate(args.logid, args.work, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): Buffer => {
            const result: ICalculate__ResultArgs = { success: data };
            output.writeMessageBegin("calculate", thrift.MessageType.REPLY, requestId);
            Calculate__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            if (err instanceof com_test_operation.JankyOperation) {
                const result: ICalculate__ResultArgs = { ouch: err };
                output.writeMessageBegin("calculate", thrift.MessageType.REPLY, requestId);
                Calculate__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }
            else {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("calculate", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }
        });
    }
    public process_echoBinary(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<string>((resolve, reject): void => {
            try {
                const args: IEchoBinary__Args = EchoBinary__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.echoBinary(args.word, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: string): Buffer => {
            const result: IEchoBinary__ResultArgs = { success: data };
            output.writeMessageBegin("echoBinary", thrift.MessageType.REPLY, requestId);
            EchoBinary__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("echoBinary", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
    public process_echoString(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<string>((resolve, reject): void => {
            try {
                const args: IEchoString__Args = EchoString__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.echoString(args.word, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: string): Buffer => {
            const result: IEchoString__ResultArgs = { success: data };
            output.writeMessageBegin("echoString", thrift.MessageType.REPLY, requestId);
            EchoString__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("echoString", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
    public process_checkName(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<string>((resolve, reject): void => {
            try {
                const args: ICheckName__Args = CheckName__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.checkName(args.choice, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: string): Buffer => {
            const result: ICheckName__ResultArgs = { success: data };
            output.writeMessageBegin("checkName", thrift.MessageType.REPLY, requestId);
            CheckName__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("checkName", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
    public process_checkOptional(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<string>((resolve, reject): void => {
            try {
                const args: ICheckOptional__Args = CheckOptional__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.checkOptional(args.type, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: string): Buffer => {
            const result: ICheckOptional__ResultArgs = { success: data };
            output.writeMessageBegin("checkOptional", thrift.MessageType.REPLY, requestId);
            CheckOptional__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("checkOptional", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
    public process_mapOneList(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<Array<number>>((resolve, reject): void => {
            try {
                const args: IMapOneList__Args = MapOneList__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.mapOneList(args.arg, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<number>): Buffer => {
            const result: IMapOneList__ResultArgs = { success: data };
            output.writeMessageBegin("mapOneList", thrift.MessageType.REPLY, requestId);
            MapOneList__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("mapOneList", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
    public process_mapValues(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<Array<number>>((resolve, reject): void => {
            try {
                const args: IMapValues__Args = MapValues__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.mapValues(args.arg, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<number>): Buffer => {
            const result: IMapValues__ResultArgs = { success: data };
            output.writeMessageBegin("mapValues", thrift.MessageType.REPLY, requestId);
            MapValues__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("mapValues", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
    public process_listToMap(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<Map<string, string>>((resolve, reject): void => {
            try {
                const args: IListToMap__Args = ListToMap__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.listToMap(args.arg, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Map<string, string>): Buffer => {
            const result: IListToMap__ResultArgs = { success: data };
            output.writeMessageBegin("listToMap", thrift.MessageType.REPLY, requestId);
            ListToMap__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("listToMap", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
    public process_fetchThing(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<com_test_common.ICommonStructArgs>((resolve, reject): void => {
            try {
                input.readMessageEnd();
                resolve(this._handler.fetchThing(context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: com_test_common.ICommonStructArgs): Buffer => {
            const result: IFetchThing__ResultArgs = { success: data };
            output.writeMessageBegin("fetchThing", thrift.MessageType.REPLY, requestId);
            FetchThing__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("fetchThing", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
    public process_zip(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<void>((resolve, reject): void => {
            try {
                input.readMessageEnd();
                resolve(this._handler.zip(context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: void): Buffer => {
            const result: IZip__ResultArgs = { success: data };
            output.writeMessageBegin("zip", thrift.MessageType.REPLY, requestId);
            Zip__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("zip", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
}
