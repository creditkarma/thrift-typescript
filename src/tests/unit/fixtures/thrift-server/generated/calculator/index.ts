/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v{{VERSION}}
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "test-lib";
import * as shared from "./../shared";
import * as common from "./../common";
import * as operation from "./../operation";
export type MyInteger = number;
export import Operation = operation.Operation;
export import ICommonStruct = common.ICommonStruct;
export import ICommonStructArgs = common.ICommonStructArgs;
export import CommonStruct = common.CommonStruct;
export import CommonStructCodec = common.CommonStructCodec;
export const INT32CONSTANT: number = 9853;
export const MAPCONSTANT: Map<string, string> = new Map([["hello", "world"], ["goodnight", "moon"]]);
export interface IWork {
    num1: number;
    num2: number;
    op: Operation;
    comment?: string;
}
export interface IWorkArgs {
    num1?: number;
    num2: number;
    op: Operation;
    comment?: string;
}
export const WorkCodec: thrift.IStructCodec<IWorkArgs, IWork> = {
    encode(args: IWorkArgs, output: thrift.TProtocol): void {
        const obj = {
            num1: (args.num1 != null ? args.num1 : 0),
            num2: args.num2,
            op: args.op,
            comment: args.comment
        };
        output.writeStructBegin("Work");
        if (obj.num1 != null) {
            output.writeFieldBegin("num1", thrift.TType.I32, 1);
            output.writeI32(obj.num1);
            output.writeFieldEnd();
        }
        if (obj.num2 != null) {
            output.writeFieldBegin("num2", thrift.TType.I32, 2);
            output.writeI32(obj.num2);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
        }
        if (obj.op != null) {
            output.writeFieldBegin("op", thrift.TType.I32, 3);
            output.writeI32(obj.op);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[op] is unset!");
        }
        if (obj.comment != null) {
            output.writeFieldBegin("comment", thrift.TType.STRING, 4);
            output.writeString(obj.comment);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IWork {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.num1 = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: number = input.readI32();
                        _args.num2 = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_3: Operation = input.readI32();
                        _args.op = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.comment = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.num1 !== undefined && _args.num2 !== undefined && _args.op !== undefined) {
            return {
                num1: (_args.num1 != null ? _args.num1 : 0),
                num2: _args.num2,
                op: _args.op,
                comment: _args.comment
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Work from input");
        }
    }
};
export class Work extends thrift.StructLike implements IWork {
    public num1: number = 0;
    public num2: number;
    public op: Operation;
    public comment?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IWorkArgs) {
        super();
        if (args.num1 != null) {
            const value_5: number = args.num1;
            this.num1 = value_5;
        }
        if (args.num2 != null) {
            const value_6: number = args.num2;
            this.num2 = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
        }
        if (args.op != null) {
            const value_7: Operation = args.op;
            this.op = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[op] is unset!");
        }
        if (args.comment != null) {
            const value_8: string = args.comment;
            this.comment = value_8;
        }
    }
    public static read(input: thrift.TProtocol): Work {
        return new Work(WorkCodec.decode(input));
    }
    public static write(args: IWorkArgs, output: thrift.TProtocol): void {
        return WorkCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return WorkCodec.encode(this, output);
    }
}
export interface IFirstName {
    name?: string;
}
export interface IFirstNameArgs {
    name?: string;
}
export const FirstNameCodec: thrift.IStructCodec<IFirstNameArgs, IFirstName> = {
    encode(args: IFirstNameArgs, output: thrift.TProtocol): void {
        const obj = {
            name: args.name
        };
        output.writeStructBegin("FirstName");
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 1);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IFirstName {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.name = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            name: _args.name
        };
    }
};
export class FirstName extends thrift.StructLike implements IFirstName {
    public name?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IFirstNameArgs = {}) {
        super();
        if (args.name != null) {
            const value_10: string = args.name;
            this.name = value_10;
        }
    }
    public static read(input: thrift.TProtocol): FirstName {
        return new FirstName(FirstNameCodec.decode(input));
    }
    public static write(args: IFirstNameArgs, output: thrift.TProtocol): void {
        return FirstNameCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return FirstNameCodec.encode(this, output);
    }
}
export interface ILastName {
    name?: string;
}
export interface ILastNameArgs {
    name?: string;
}
export const LastNameCodec: thrift.IStructCodec<ILastNameArgs, ILastName> = {
    encode(args: ILastNameArgs, output: thrift.TProtocol): void {
        const obj = {
            name: args.name
        };
        output.writeStructBegin("LastName");
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 1);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ILastName {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_11: string = input.readString();
                        _args.name = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            name: _args.name
        };
    }
};
export class LastName extends thrift.StructLike implements ILastName {
    public name?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ILastNameArgs = {}) {
        super();
        if (args.name != null) {
            const value_12: string = args.name;
            this.name = value_12;
        }
    }
    public static read(input: thrift.TProtocol): LastName {
        return new LastName(LastNameCodec.decode(input));
    }
    public static write(args: ILastNameArgs, output: thrift.TProtocol): void {
        return LastNameCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return LastNameCodec.encode(this, output);
    }
}
export interface IChoice {
    firstName?: IFirstName;
    lastName?: ILastName;
}
export interface IChoiceArgs {
    firstName?: IFirstNameArgs;
    lastName?: ILastNameArgs;
}
export const ChoiceCodec: thrift.IStructCodec<IChoiceArgs, IChoice> = {
    encode(args: IChoiceArgs, output: thrift.TProtocol): void {
        let _fieldsSet: number = 0;
        const obj = {
            firstName: args.firstName,
            lastName: args.lastName
        };
        output.writeStructBegin("Choice");
        if (obj.firstName != null) {
            _fieldsSet++;
            output.writeFieldBegin("firstName", thrift.TType.STRUCT, 1);
            FirstNameCodec.encode(obj.firstName, output);
            output.writeFieldEnd();
        }
        if (obj.lastName != null) {
            _fieldsSet++;
            output.writeFieldBegin("lastName", thrift.TType.STRUCT, 2);
            LastNameCodec.encode(obj.lastName, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
        return;
    },
    decode(input: thrift.TProtocol): IChoice {
        let _fieldsSet: number = 0;
        let _returnValue: IChoice | null = null;
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_13: IFirstName = FirstNameCodec.decode(input);
                        _returnValue = { firstName: value_13 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_14: ILastName = LastNameCodec.decode(input);
                        _returnValue = { lastName: value_14 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
        if (_returnValue !== null) {
            return _returnValue;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read data for TUnion");
        }
    }
};
export class Choice extends thrift.StructLike implements IChoice {
    public firstName?: IFirstName;
    public lastName?: ILastName;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IChoiceArgs = {}) {
        super();
        let _fieldsSet: number = 0;
        if (args.firstName != null) {
            _fieldsSet++;
            const value_15: IFirstName = new FirstName(args.firstName);
            this.firstName = value_15;
        }
        if (args.lastName != null) {
            _fieldsSet++;
            const value_16: ILastName = new LastName(args.lastName);
            this.lastName = value_16;
        }
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
    }
    public static read(input: thrift.TProtocol): Choice {
        return new Choice(ChoiceCodec.decode(input));
    }
    public static write(args: IChoiceArgs, output: thrift.TProtocol): void {
        return ChoiceCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ChoiceCodec.encode(this, output);
    }
}
export namespace Calculator {
    export const serviceName: string = "Calculator";
    export const annotations: thrift.IThriftAnnotations = {};
    export const methodAnnotations: thrift.IMethodAnnotations = {
        getStruct: {
            annotations: {},
            fieldAnnotations: {}
        },
        getUnion: {
            annotations: {},
            fieldAnnotations: {}
        },
        ping: {
            annotations: {},
            fieldAnnotations: {}
        },
        add: {
            annotations: {},
            fieldAnnotations: {}
        },
        addInt64: {
            annotations: {},
            fieldAnnotations: {}
        },
        addWithContext: {
            annotations: {},
            fieldAnnotations: {}
        },
        calculate: {
            annotations: {},
            fieldAnnotations: {}
        },
        echoBinary: {
            annotations: {},
            fieldAnnotations: {}
        },
        echoString: {
            annotations: {},
            fieldAnnotations: {}
        },
        checkName: {
            annotations: {},
            fieldAnnotations: {}
        },
        checkOptional: {
            annotations: {},
            fieldAnnotations: {}
        },
        mapOneList: {
            annotations: {},
            fieldAnnotations: {}
        },
        mapValues: {
            annotations: {},
            fieldAnnotations: {}
        },
        listToMap: {
            annotations: {},
            fieldAnnotations: {}
        },
        fetchThing: {
            annotations: {},
            fieldAnnotations: {}
        },
        zip: {
            annotations: {},
            fieldAnnotations: {}
        }
    };
    export const methodNames: Array<string> = ["getStruct", "getUnion", "ping", "add", "addInt64", "addWithContext", "calculate", "echoBinary", "echoString", "checkName", "checkOptional", "mapOneList", "mapValues", "listToMap", "fetchThing", "zip"];
    export interface IPing__Args {
    }
    export interface IPing__ArgsArgs {
    }
    export const Ping__ArgsCodec: thrift.IStructCodec<IPing__ArgsArgs, IPing__Args> = {
        encode(args: IPing__ArgsArgs, output: thrift.TProtocol): void {
            output.writeStructBegin("Ping__Args");
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IPing__Args {
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {};
        }
    };
    export class Ping__Args extends thrift.StructLike implements IPing__Args {
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IPing__ArgsArgs = {}) {
            super();
        }
        public static read(input: thrift.TProtocol): Ping__Args {
            return new Ping__Args(Ping__ArgsCodec.decode(input));
        }
        public static write(args: IPing__ArgsArgs, output: thrift.TProtocol): void {
            return Ping__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return Ping__ArgsCodec.encode(this, output);
        }
    }
    export interface IAdd__Args {
        num1: number;
        num2: number;
    }
    export interface IAdd__ArgsArgs {
        num1: number;
        num2: number;
    }
    export const Add__ArgsCodec: thrift.IStructCodec<IAdd__ArgsArgs, IAdd__Args> = {
        encode(args: IAdd__ArgsArgs, output: thrift.TProtocol): void {
            const obj = {
                num1: args.num1,
                num2: args.num2
            };
            output.writeStructBegin("Add__Args");
            if (obj.num1 != null) {
                output.writeFieldBegin("num1", thrift.TType.I32, 1);
                output.writeI32(obj.num1);
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
            }
            if (obj.num2 != null) {
                output.writeFieldBegin("num2", thrift.TType.I32, 2);
                output.writeI32(obj.num2);
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IAdd__Args {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.I32) {
                            const value_17: number = input.readI32();
                            _args.num1 = value_17;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    case 2:
                        if (fieldType === thrift.TType.I32) {
                            const value_18: number = input.readI32();
                            _args.num2 = value_18;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.num1 !== undefined && _args.num2 !== undefined) {
                return {
                    num1: _args.num1,
                    num2: _args.num2
                };
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Add__Args from input");
            }
        }
    };
    export class Add__Args extends thrift.StructLike implements IAdd__Args {
        public num1: number;
        public num2: number;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IAdd__ArgsArgs) {
            super();
            if (args.num1 != null) {
                const value_19: number = args.num1;
                this.num1 = value_19;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
            }
            if (args.num2 != null) {
                const value_20: number = args.num2;
                this.num2 = value_20;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
            }
        }
        public static read(input: thrift.TProtocol): Add__Args {
            return new Add__Args(Add__ArgsCodec.decode(input));
        }
        public static write(args: IAdd__ArgsArgs, output: thrift.TProtocol): void {
            return Add__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return Add__ArgsCodec.encode(this, output);
        }
    }
    export interface IAddInt64__Args {
        num1: thrift.Int64;
        num2: thrift.Int64;
    }
    export interface IAddInt64__ArgsArgs {
        num1: number | string | thrift.Int64;
        num2: number | string | thrift.Int64;
    }
    export const AddInt64__ArgsCodec: thrift.IStructCodec<IAddInt64__ArgsArgs, IAddInt64__Args> = {
        encode(args: IAddInt64__ArgsArgs, output: thrift.TProtocol): void {
            const obj = {
                num1: (typeof args.num1 === "number" ? new thrift.Int64(args.num1) : typeof args.num1 === "string" ? thrift.Int64.fromDecimalString(args.num1) : args.num1),
                num2: (typeof args.num2 === "number" ? new thrift.Int64(args.num2) : typeof args.num2 === "string" ? thrift.Int64.fromDecimalString(args.num2) : args.num2)
            };
            output.writeStructBegin("AddInt64__Args");
            if (obj.num1 != null) {
                output.writeFieldBegin("num1", thrift.TType.I64, 1);
                output.writeI64((typeof obj.num1 === "number" ? new thrift.Int64(obj.num1) : typeof obj.num1 === "string" ? thrift.Int64.fromDecimalString(obj.num1) : obj.num1));
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
            }
            if (obj.num2 != null) {
                output.writeFieldBegin("num2", thrift.TType.I64, 2);
                output.writeI64((typeof obj.num2 === "number" ? new thrift.Int64(obj.num2) : typeof obj.num2 === "string" ? thrift.Int64.fromDecimalString(obj.num2) : obj.num2));
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IAddInt64__Args {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.I64) {
                            const value_21: thrift.Int64 = input.readI64();
                            _args.num1 = value_21;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    case 2:
                        if (fieldType === thrift.TType.I64) {
                            const value_22: thrift.Int64 = input.readI64();
                            _args.num2 = value_22;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.num1 !== undefined && _args.num2 !== undefined) {
                return {
                    num1: _args.num1,
                    num2: _args.num2
                };
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddInt64__Args from input");
            }
        }
    };
    export class AddInt64__Args extends thrift.StructLike implements IAddInt64__Args {
        public num1: thrift.Int64;
        public num2: thrift.Int64;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IAddInt64__ArgsArgs) {
            super();
            if (args.num1 != null) {
                const value_23: thrift.Int64 = (typeof args.num1 === "number" ? new thrift.Int64(args.num1) : typeof args.num1 === "string" ? thrift.Int64.fromDecimalString(args.num1) : args.num1);
                this.num1 = value_23;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
            }
            if (args.num2 != null) {
                const value_24: thrift.Int64 = (typeof args.num2 === "number" ? new thrift.Int64(args.num2) : typeof args.num2 === "string" ? thrift.Int64.fromDecimalString(args.num2) : args.num2);
                this.num2 = value_24;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
            }
        }
        public static read(input: thrift.TProtocol): AddInt64__Args {
            return new AddInt64__Args(AddInt64__ArgsCodec.decode(input));
        }
        public static write(args: IAddInt64__ArgsArgs, output: thrift.TProtocol): void {
            return AddInt64__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return AddInt64__ArgsCodec.encode(this, output);
        }
    }
    export interface IAddWithContext__Args {
        num1: number;
        num2: number;
    }
    export interface IAddWithContext__ArgsArgs {
        num1: number;
        num2: number;
    }
    export const AddWithContext__ArgsCodec: thrift.IStructCodec<IAddWithContext__ArgsArgs, IAddWithContext__Args> = {
        encode(args: IAddWithContext__ArgsArgs, output: thrift.TProtocol): void {
            const obj = {
                num1: args.num1,
                num2: args.num2
            };
            output.writeStructBegin("AddWithContext__Args");
            if (obj.num1 != null) {
                output.writeFieldBegin("num1", thrift.TType.I32, 1);
                output.writeI32(obj.num1);
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
            }
            if (obj.num2 != null) {
                output.writeFieldBegin("num2", thrift.TType.I32, 2);
                output.writeI32(obj.num2);
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IAddWithContext__Args {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.I32) {
                            const value_25: number = input.readI32();
                            _args.num1 = value_25;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    case 2:
                        if (fieldType === thrift.TType.I32) {
                            const value_26: number = input.readI32();
                            _args.num2 = value_26;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.num1 !== undefined && _args.num2 !== undefined) {
                return {
                    num1: _args.num1,
                    num2: _args.num2
                };
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddWithContext__Args from input");
            }
        }
    };
    export class AddWithContext__Args extends thrift.StructLike implements IAddWithContext__Args {
        public num1: number;
        public num2: number;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IAddWithContext__ArgsArgs) {
            super();
            if (args.num1 != null) {
                const value_27: number = args.num1;
                this.num1 = value_27;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
            }
            if (args.num2 != null) {
                const value_28: number = args.num2;
                this.num2 = value_28;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
            }
        }
        public static read(input: thrift.TProtocol): AddWithContext__Args {
            return new AddWithContext__Args(AddWithContext__ArgsCodec.decode(input));
        }
        public static write(args: IAddWithContext__ArgsArgs, output: thrift.TProtocol): void {
            return AddWithContext__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return AddWithContext__ArgsCodec.encode(this, output);
        }
    }
    export interface ICalculate__Args {
        logid: number;
        work: IWork;
    }
    export interface ICalculate__ArgsArgs {
        logid: number;
        work: IWorkArgs;
    }
    export const Calculate__ArgsCodec: thrift.IStructCodec<ICalculate__ArgsArgs, ICalculate__Args> = {
        encode(args: ICalculate__ArgsArgs, output: thrift.TProtocol): void {
            const obj = {
                logid: args.logid,
                work: args.work
            };
            output.writeStructBegin("Calculate__Args");
            if (obj.logid != null) {
                output.writeFieldBegin("logid", thrift.TType.I32, 1);
                output.writeI32(obj.logid);
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[logid] is unset!");
            }
            if (obj.work != null) {
                output.writeFieldBegin("work", thrift.TType.STRUCT, 2);
                WorkCodec.encode(obj.work, output);
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[work] is unset!");
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): ICalculate__Args {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.I32) {
                            const value_29: number = input.readI32();
                            _args.logid = value_29;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    case 2:
                        if (fieldType === thrift.TType.STRUCT) {
                            const value_30: IWork = WorkCodec.decode(input);
                            _args.work = value_30;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.logid !== undefined && _args.work !== undefined) {
                return {
                    logid: _args.logid,
                    work: _args.work
                };
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Calculate__Args from input");
            }
        }
    };
    export class Calculate__Args extends thrift.StructLike implements ICalculate__Args {
        public logid: number;
        public work: IWork;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: ICalculate__ArgsArgs) {
            super();
            if (args.logid != null) {
                const value_31: number = args.logid;
                this.logid = value_31;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[logid] is unset!");
            }
            if (args.work != null) {
                const value_32: IWork = new Work(args.work);
                this.work = value_32;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[work] is unset!");
            }
        }
        public static read(input: thrift.TProtocol): Calculate__Args {
            return new Calculate__Args(Calculate__ArgsCodec.decode(input));
        }
        public static write(args: ICalculate__ArgsArgs, output: thrift.TProtocol): void {
            return Calculate__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return Calculate__ArgsCodec.encode(this, output);
        }
    }
    export interface IEchoBinary__Args {
        word: Buffer;
    }
    export interface IEchoBinary__ArgsArgs {
        word: string | Buffer;
    }
    export const EchoBinary__ArgsCodec: thrift.IStructCodec<IEchoBinary__ArgsArgs, IEchoBinary__Args> = {
        encode(args: IEchoBinary__ArgsArgs, output: thrift.TProtocol): void {
            const obj = {
                word: (typeof args.word === "string" ? Buffer.from(args.word) : args.word)
            };
            output.writeStructBegin("EchoBinary__Args");
            if (obj.word != null) {
                output.writeFieldBegin("word", thrift.TType.STRING, 1);
                output.writeBinary(obj.word);
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[word] is unset!");
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IEchoBinary__Args {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.STRING) {
                            const value_33: Buffer = input.readBinary();
                            _args.word = value_33;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.word !== undefined) {
                return {
                    word: _args.word
                };
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read EchoBinary__Args from input");
            }
        }
    };
    export class EchoBinary__Args extends thrift.StructLike implements IEchoBinary__Args {
        public word: Buffer;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IEchoBinary__ArgsArgs) {
            super();
            if (args.word != null) {
                const value_34: Buffer = (typeof args.word === "string" ? Buffer.from(args.word) : args.word);
                this.word = value_34;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[word] is unset!");
            }
        }
        public static read(input: thrift.TProtocol): EchoBinary__Args {
            return new EchoBinary__Args(EchoBinary__ArgsCodec.decode(input));
        }
        public static write(args: IEchoBinary__ArgsArgs, output: thrift.TProtocol): void {
            return EchoBinary__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return EchoBinary__ArgsCodec.encode(this, output);
        }
    }
    export interface IEchoString__Args {
        word: string;
    }
    export interface IEchoString__ArgsArgs {
        word: string;
    }
    export const EchoString__ArgsCodec: thrift.IStructCodec<IEchoString__ArgsArgs, IEchoString__Args> = {
        encode(args: IEchoString__ArgsArgs, output: thrift.TProtocol): void {
            const obj = {
                word: args.word
            };
            output.writeStructBegin("EchoString__Args");
            if (obj.word != null) {
                output.writeFieldBegin("word", thrift.TType.STRING, 1);
                output.writeString(obj.word);
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[word] is unset!");
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IEchoString__Args {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.STRING) {
                            const value_35: string = input.readString();
                            _args.word = value_35;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.word !== undefined) {
                return {
                    word: _args.word
                };
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read EchoString__Args from input");
            }
        }
    };
    export class EchoString__Args extends thrift.StructLike implements IEchoString__Args {
        public word: string;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IEchoString__ArgsArgs) {
            super();
            if (args.word != null) {
                const value_36: string = args.word;
                this.word = value_36;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[word] is unset!");
            }
        }
        public static read(input: thrift.TProtocol): EchoString__Args {
            return new EchoString__Args(EchoString__ArgsCodec.decode(input));
        }
        public static write(args: IEchoString__ArgsArgs, output: thrift.TProtocol): void {
            return EchoString__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return EchoString__ArgsCodec.encode(this, output);
        }
    }
    export interface ICheckName__Args {
        choice: IChoice;
    }
    export interface ICheckName__ArgsArgs {
        choice: IChoiceArgs;
    }
    export const CheckName__ArgsCodec: thrift.IStructCodec<ICheckName__ArgsArgs, ICheckName__Args> = {
        encode(args: ICheckName__ArgsArgs, output: thrift.TProtocol): void {
            const obj = {
                choice: args.choice
            };
            output.writeStructBegin("CheckName__Args");
            if (obj.choice != null) {
                output.writeFieldBegin("choice", thrift.TType.STRUCT, 1);
                ChoiceCodec.encode(obj.choice, output);
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[choice] is unset!");
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): ICheckName__Args {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.STRUCT) {
                            const value_37: IChoice = ChoiceCodec.decode(input);
                            _args.choice = value_37;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.choice !== undefined) {
                return {
                    choice: _args.choice
                };
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CheckName__Args from input");
            }
        }
    };
    export class CheckName__Args extends thrift.StructLike implements ICheckName__Args {
        public choice: IChoice;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: ICheckName__ArgsArgs) {
            super();
            if (args.choice != null) {
                const value_38: IChoice = new Choice(args.choice);
                this.choice = value_38;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[choice] is unset!");
            }
        }
        public static read(input: thrift.TProtocol): CheckName__Args {
            return new CheckName__Args(CheckName__ArgsCodec.decode(input));
        }
        public static write(args: ICheckName__ArgsArgs, output: thrift.TProtocol): void {
            return CheckName__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return CheckName__ArgsCodec.encode(this, output);
        }
    }
    export interface ICheckOptional__Args {
        type?: string;
    }
    export interface ICheckOptional__ArgsArgs {
        type?: string;
    }
    export const CheckOptional__ArgsCodec: thrift.IStructCodec<ICheckOptional__ArgsArgs, ICheckOptional__Args> = {
        encode(args: ICheckOptional__ArgsArgs, output: thrift.TProtocol): void {
            const obj = {
                type: args.type
            };
            output.writeStructBegin("CheckOptional__Args");
            if (obj.type != null) {
                output.writeFieldBegin("type", thrift.TType.STRING, 1);
                output.writeString(obj.type);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): ICheckOptional__Args {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.STRING) {
                            const value_39: string = input.readString();
                            _args.type = value_39;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                type: _args.type
            };
        }
    };
    export class CheckOptional__Args extends thrift.StructLike implements ICheckOptional__Args {
        public type?: string;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: ICheckOptional__ArgsArgs = {}) {
            super();
            if (args.type != null) {
                const value_40: string = args.type;
                this.type = value_40;
            }
        }
        public static read(input: thrift.TProtocol): CheckOptional__Args {
            return new CheckOptional__Args(CheckOptional__ArgsCodec.decode(input));
        }
        public static write(args: ICheckOptional__ArgsArgs, output: thrift.TProtocol): void {
            return CheckOptional__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return CheckOptional__ArgsCodec.encode(this, output);
        }
    }
    export interface IMapOneList__Args {
        arg: Array<number>;
    }
    export interface IMapOneList__ArgsArgs {
        arg: Array<number>;
    }
    export const MapOneList__ArgsCodec: thrift.IStructCodec<IMapOneList__ArgsArgs, IMapOneList__Args> = {
        encode(args: IMapOneList__ArgsArgs, output: thrift.TProtocol): void {
            const obj = {
                arg: args.arg
            };
            output.writeStructBegin("MapOneList__Args");
            if (obj.arg != null) {
                output.writeFieldBegin("arg", thrift.TType.LIST, 1);
                output.writeListBegin(thrift.TType.I32, obj.arg.length);
                obj.arg.forEach((value_41: number): void => {
                    output.writeI32(value_41);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IMapOneList__Args {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.LIST) {
                            const value_42: Array<number> = new Array<number>();
                            const metadata_1: thrift.IThriftList = input.readListBegin();
                            const size_1: number = metadata_1.size;
                            for (let i_1: number = 0; i_1 < size_1; i_1++) {
                                const value_43: number = input.readI32();
                                value_42.push(value_43);
                            }
                            input.readListEnd();
                            _args.arg = value_42;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.arg !== undefined) {
                return {
                    arg: _args.arg
                };
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read MapOneList__Args from input");
            }
        }
    };
    export class MapOneList__Args extends thrift.StructLike implements IMapOneList__Args {
        public arg: Array<number>;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IMapOneList__ArgsArgs) {
            super();
            if (args.arg != null) {
                const value_44: Array<number> = new Array<number>();
                args.arg.forEach((value_45: number): void => {
                    const value_46: number = value_45;
                    value_44.push(value_46);
                });
                this.arg = value_44;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
            }
        }
        public static read(input: thrift.TProtocol): MapOneList__Args {
            return new MapOneList__Args(MapOneList__ArgsCodec.decode(input));
        }
        public static write(args: IMapOneList__ArgsArgs, output: thrift.TProtocol): void {
            return MapOneList__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return MapOneList__ArgsCodec.encode(this, output);
        }
    }
    export interface IMapValues__Args {
        arg: Map<string, number>;
    }
    export interface IMapValues__ArgsArgs {
        arg: Map<string, number>;
    }
    export const MapValues__ArgsCodec: thrift.IStructCodec<IMapValues__ArgsArgs, IMapValues__Args> = {
        encode(args: IMapValues__ArgsArgs, output: thrift.TProtocol): void {
            const obj = {
                arg: args.arg
            };
            output.writeStructBegin("MapValues__Args");
            if (obj.arg != null) {
                output.writeFieldBegin("arg", thrift.TType.MAP, 1);
                output.writeMapBegin(thrift.TType.STRING, thrift.TType.I32, obj.arg.size);
                obj.arg.forEach((value_47: number, key_1: string): void => {
                    output.writeString(key_1);
                    output.writeI32(value_47);
                });
                output.writeMapEnd();
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IMapValues__Args {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.MAP) {
                            const value_48: Map<string, number> = new Map<string, number>();
                            const metadata_2: thrift.IThriftMap = input.readMapBegin();
                            const size_2: number = metadata_2.size;
                            for (let i_2: number = 0; i_2 < size_2; i_2++) {
                                const key_2: string = input.readString();
                                const value_49: number = input.readI32();
                                value_48.set(key_2, value_49);
                            }
                            input.readMapEnd();
                            _args.arg = value_48;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.arg !== undefined) {
                return {
                    arg: _args.arg
                };
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read MapValues__Args from input");
            }
        }
    };
    export class MapValues__Args extends thrift.StructLike implements IMapValues__Args {
        public arg: Map<string, number>;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IMapValues__ArgsArgs) {
            super();
            if (args.arg != null) {
                const value_50: Map<string, number> = new Map<string, number>();
                args.arg.forEach((value_51: number, key_3: string): void => {
                    const value_52: number = value_51;
                    const key_4: string = key_3;
                    value_50.set(key_4, value_52);
                });
                this.arg = value_50;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
            }
        }
        public static read(input: thrift.TProtocol): MapValues__Args {
            return new MapValues__Args(MapValues__ArgsCodec.decode(input));
        }
        public static write(args: IMapValues__ArgsArgs, output: thrift.TProtocol): void {
            return MapValues__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return MapValues__ArgsCodec.encode(this, output);
        }
    }
    export interface IListToMap__Args {
        arg: Array<Array<string>>;
    }
    export interface IListToMap__ArgsArgs {
        arg: Array<Array<string>>;
    }
    export const ListToMap__ArgsCodec: thrift.IStructCodec<IListToMap__ArgsArgs, IListToMap__Args> = {
        encode(args: IListToMap__ArgsArgs, output: thrift.TProtocol): void {
            const obj = {
                arg: args.arg
            };
            output.writeStructBegin("ListToMap__Args");
            if (obj.arg != null) {
                output.writeFieldBegin("arg", thrift.TType.LIST, 1);
                output.writeListBegin(thrift.TType.LIST, obj.arg.length);
                obj.arg.forEach((value_53: Array<string>): void => {
                    output.writeListBegin(thrift.TType.STRING, value_53.length);
                    value_53.forEach((value_54: string): void => {
                        output.writeString(value_54);
                    });
                    output.writeListEnd();
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IListToMap__Args {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.LIST) {
                            const value_55: Array<Array<string>> = new Array<Array<string>>();
                            const metadata_3: thrift.IThriftList = input.readListBegin();
                            const size_3: number = metadata_3.size;
                            for (let i_3: number = 0; i_3 < size_3; i_3++) {
                                const value_56: Array<string> = new Array<string>();
                                const metadata_4: thrift.IThriftList = input.readListBegin();
                                const size_4: number = metadata_4.size;
                                for (let i_4: number = 0; i_4 < size_4; i_4++) {
                                    const value_57: string = input.readString();
                                    value_56.push(value_57);
                                }
                                input.readListEnd();
                                value_55.push(value_56);
                            }
                            input.readListEnd();
                            _args.arg = value_55;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.arg !== undefined) {
                return {
                    arg: _args.arg
                };
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ListToMap__Args from input");
            }
        }
    };
    export class ListToMap__Args extends thrift.StructLike implements IListToMap__Args {
        public arg: Array<Array<string>>;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IListToMap__ArgsArgs) {
            super();
            if (args.arg != null) {
                const value_58: Array<Array<string>> = new Array<Array<string>>();
                args.arg.forEach((value_59: Array<string>): void => {
                    const value_60: Array<string> = new Array<string>();
                    value_59.forEach((value_61: string): void => {
                        const value_62: string = value_61;
                        value_60.push(value_62);
                    });
                    value_58.push(value_60);
                });
                this.arg = value_58;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[arg] is unset!");
            }
        }
        public static read(input: thrift.TProtocol): ListToMap__Args {
            return new ListToMap__Args(ListToMap__ArgsCodec.decode(input));
        }
        public static write(args: IListToMap__ArgsArgs, output: thrift.TProtocol): void {
            return ListToMap__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return ListToMap__ArgsCodec.encode(this, output);
        }
    }
    export interface IFetchThing__Args {
    }
    export interface IFetchThing__ArgsArgs {
    }
    export const FetchThing__ArgsCodec: thrift.IStructCodec<IFetchThing__ArgsArgs, IFetchThing__Args> = {
        encode(args: IFetchThing__ArgsArgs, output: thrift.TProtocol): void {
            output.writeStructBegin("FetchThing__Args");
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IFetchThing__Args {
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {};
        }
    };
    export class FetchThing__Args extends thrift.StructLike implements IFetchThing__Args {
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IFetchThing__ArgsArgs = {}) {
            super();
        }
        public static read(input: thrift.TProtocol): FetchThing__Args {
            return new FetchThing__Args(FetchThing__ArgsCodec.decode(input));
        }
        public static write(args: IFetchThing__ArgsArgs, output: thrift.TProtocol): void {
            return FetchThing__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return FetchThing__ArgsCodec.encode(this, output);
        }
    }
    export interface IZip__Args {
    }
    export interface IZip__ArgsArgs {
    }
    export const Zip__ArgsCodec: thrift.IStructCodec<IZip__ArgsArgs, IZip__Args> = {
        encode(args: IZip__ArgsArgs, output: thrift.TProtocol): void {
            output.writeStructBegin("Zip__Args");
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IZip__Args {
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {};
        }
    };
    export class Zip__Args extends thrift.StructLike implements IZip__Args {
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IZip__ArgsArgs = {}) {
            super();
        }
        public static read(input: thrift.TProtocol): Zip__Args {
            return new Zip__Args(Zip__ArgsCodec.decode(input));
        }
        public static write(args: IZip__ArgsArgs, output: thrift.TProtocol): void {
            return Zip__ArgsCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return Zip__ArgsCodec.encode(this, output);
        }
    }
    export interface IPing__Result {
        success?: void;
    }
    export interface IPing__ResultArgs {
        success?: void;
    }
    export const Ping__ResultCodec: thrift.IStructCodec<IPing__ResultArgs, IPing__Result> = {
        encode(args: IPing__ResultArgs, output: thrift.TProtocol): void {
            output.writeStructBegin("Ping__Result");
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IPing__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.VOID) {
                            input.skip(fieldType);
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class Ping__Result extends thrift.StructLike implements IPing__Result {
        public success?: void;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IPing__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_63: void = undefined;
                this.success = value_63;
            }
        }
        public static read(input: thrift.TProtocol): Ping__Result {
            return new Ping__Result(Ping__ResultCodec.decode(input));
        }
        public static write(args: IPing__ResultArgs, output: thrift.TProtocol): void {
            return Ping__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return Ping__ResultCodec.encode(this, output);
        }
    }
    export interface IAdd__Result {
        success?: number;
        exp?: operation.IJankyResult;
    }
    export interface IAdd__ResultArgs {
        success?: number;
        exp?: operation.IJankyResultArgs;
    }
    export const Add__ResultCodec: thrift.IStructCodec<IAdd__ResultArgs, IAdd__Result> = {
        encode(args: IAdd__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: args.success,
                exp: args.exp
            };
            output.writeStructBegin("Add__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.I32, 0);
                output.writeI32(obj.success);
                output.writeFieldEnd();
            }
            if (obj.exp != null) {
                output.writeFieldBegin("exp", thrift.TType.STRUCT, 1);
                operation.JankyResultCodec.encode(obj.exp, output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IAdd__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.I32) {
                            const value_64: number = input.readI32();
                            _args.success = value_64;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    case 1:
                        if (fieldType === thrift.TType.STRUCT) {
                            const value_65: operation.IJankyResult = operation.JankyResultCodec.decode(input);
                            _args.exp = value_65;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success,
                exp: _args.exp
            };
        }
    };
    export class Add__Result extends thrift.StructLike implements IAdd__Result {
        public success?: number;
        public exp?: operation.IJankyResult;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IAdd__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_66: number = args.success;
                this.success = value_66;
            }
            if (args.exp != null) {
                const value_67: operation.IJankyResult = new operation.JankyResult(args.exp);
                this.exp = value_67;
            }
        }
        public static read(input: thrift.TProtocol): Add__Result {
            return new Add__Result(Add__ResultCodec.decode(input));
        }
        public static write(args: IAdd__ResultArgs, output: thrift.TProtocol): void {
            return Add__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return Add__ResultCodec.encode(this, output);
        }
    }
    export interface IAddInt64__Result {
        success?: thrift.Int64;
    }
    export interface IAddInt64__ResultArgs {
        success?: number | string | thrift.Int64;
    }
    export const AddInt64__ResultCodec: thrift.IStructCodec<IAddInt64__ResultArgs, IAddInt64__Result> = {
        encode(args: IAddInt64__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: (typeof args.success === "number" ? new thrift.Int64(args.success) : typeof args.success === "string" ? thrift.Int64.fromDecimalString(args.success) : args.success)
            };
            output.writeStructBegin("AddInt64__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.I64, 0);
                output.writeI64((typeof obj.success === "number" ? new thrift.Int64(obj.success) : typeof obj.success === "string" ? thrift.Int64.fromDecimalString(obj.success) : obj.success));
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IAddInt64__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.I64) {
                            const value_68: thrift.Int64 = input.readI64();
                            _args.success = value_68;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class AddInt64__Result extends thrift.StructLike implements IAddInt64__Result {
        public success?: thrift.Int64;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IAddInt64__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_69: thrift.Int64 = (typeof args.success === "number" ? new thrift.Int64(args.success) : typeof args.success === "string" ? thrift.Int64.fromDecimalString(args.success) : args.success);
                this.success = value_69;
            }
        }
        public static read(input: thrift.TProtocol): AddInt64__Result {
            return new AddInt64__Result(AddInt64__ResultCodec.decode(input));
        }
        public static write(args: IAddInt64__ResultArgs, output: thrift.TProtocol): void {
            return AddInt64__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return AddInt64__ResultCodec.encode(this, output);
        }
    }
    export interface IAddWithContext__Result {
        success?: number;
    }
    export interface IAddWithContext__ResultArgs {
        success?: number;
    }
    export const AddWithContext__ResultCodec: thrift.IStructCodec<IAddWithContext__ResultArgs, IAddWithContext__Result> = {
        encode(args: IAddWithContext__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: args.success
            };
            output.writeStructBegin("AddWithContext__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.I32, 0);
                output.writeI32(obj.success);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IAddWithContext__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.I32) {
                            const value_70: number = input.readI32();
                            _args.success = value_70;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class AddWithContext__Result extends thrift.StructLike implements IAddWithContext__Result {
        public success?: number;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IAddWithContext__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_71: number = args.success;
                this.success = value_71;
            }
        }
        public static read(input: thrift.TProtocol): AddWithContext__Result {
            return new AddWithContext__Result(AddWithContext__ResultCodec.decode(input));
        }
        public static write(args: IAddWithContext__ResultArgs, output: thrift.TProtocol): void {
            return AddWithContext__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return AddWithContext__ResultCodec.encode(this, output);
        }
    }
    export interface ICalculate__Result {
        success?: number;
        ouch?: operation.IJankyOperation;
    }
    export interface ICalculate__ResultArgs {
        success?: number;
        ouch?: operation.IJankyOperationArgs;
    }
    export const Calculate__ResultCodec: thrift.IStructCodec<ICalculate__ResultArgs, ICalculate__Result> = {
        encode(args: ICalculate__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: args.success,
                ouch: args.ouch
            };
            output.writeStructBegin("Calculate__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.I32, 0);
                output.writeI32(obj.success);
                output.writeFieldEnd();
            }
            if (obj.ouch != null) {
                output.writeFieldBegin("ouch", thrift.TType.STRUCT, 1);
                operation.JankyOperationCodec.encode(obj.ouch, output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): ICalculate__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.I32) {
                            const value_72: number = input.readI32();
                            _args.success = value_72;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    case 1:
                        if (fieldType === thrift.TType.STRUCT) {
                            const value_73: operation.IJankyOperation = operation.JankyOperationCodec.decode(input);
                            _args.ouch = value_73;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success,
                ouch: _args.ouch
            };
        }
    };
    export class Calculate__Result extends thrift.StructLike implements ICalculate__Result {
        public success?: number;
        public ouch?: operation.IJankyOperation;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: ICalculate__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_74: number = args.success;
                this.success = value_74;
            }
            if (args.ouch != null) {
                const value_75: operation.IJankyOperation = new operation.JankyOperation(args.ouch);
                this.ouch = value_75;
            }
        }
        public static read(input: thrift.TProtocol): Calculate__Result {
            return new Calculate__Result(Calculate__ResultCodec.decode(input));
        }
        public static write(args: ICalculate__ResultArgs, output: thrift.TProtocol): void {
            return Calculate__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return Calculate__ResultCodec.encode(this, output);
        }
    }
    export interface IEchoBinary__Result {
        success?: string;
    }
    export interface IEchoBinary__ResultArgs {
        success?: string;
    }
    export const EchoBinary__ResultCodec: thrift.IStructCodec<IEchoBinary__ResultArgs, IEchoBinary__Result> = {
        encode(args: IEchoBinary__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: args.success
            };
            output.writeStructBegin("EchoBinary__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.STRING, 0);
                output.writeString(obj.success);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IEchoBinary__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.STRING) {
                            const value_76: string = input.readString();
                            _args.success = value_76;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class EchoBinary__Result extends thrift.StructLike implements IEchoBinary__Result {
        public success?: string;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IEchoBinary__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_77: string = args.success;
                this.success = value_77;
            }
        }
        public static read(input: thrift.TProtocol): EchoBinary__Result {
            return new EchoBinary__Result(EchoBinary__ResultCodec.decode(input));
        }
        public static write(args: IEchoBinary__ResultArgs, output: thrift.TProtocol): void {
            return EchoBinary__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return EchoBinary__ResultCodec.encode(this, output);
        }
    }
    export interface IEchoString__Result {
        success?: string;
    }
    export interface IEchoString__ResultArgs {
        success?: string;
    }
    export const EchoString__ResultCodec: thrift.IStructCodec<IEchoString__ResultArgs, IEchoString__Result> = {
        encode(args: IEchoString__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: args.success
            };
            output.writeStructBegin("EchoString__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.STRING, 0);
                output.writeString(obj.success);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IEchoString__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.STRING) {
                            const value_78: string = input.readString();
                            _args.success = value_78;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class EchoString__Result extends thrift.StructLike implements IEchoString__Result {
        public success?: string;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IEchoString__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_79: string = args.success;
                this.success = value_79;
            }
        }
        public static read(input: thrift.TProtocol): EchoString__Result {
            return new EchoString__Result(EchoString__ResultCodec.decode(input));
        }
        public static write(args: IEchoString__ResultArgs, output: thrift.TProtocol): void {
            return EchoString__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return EchoString__ResultCodec.encode(this, output);
        }
    }
    export interface ICheckName__Result {
        success?: string;
    }
    export interface ICheckName__ResultArgs {
        success?: string;
    }
    export const CheckName__ResultCodec: thrift.IStructCodec<ICheckName__ResultArgs, ICheckName__Result> = {
        encode(args: ICheckName__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: args.success
            };
            output.writeStructBegin("CheckName__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.STRING, 0);
                output.writeString(obj.success);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): ICheckName__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.STRING) {
                            const value_80: string = input.readString();
                            _args.success = value_80;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class CheckName__Result extends thrift.StructLike implements ICheckName__Result {
        public success?: string;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: ICheckName__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_81: string = args.success;
                this.success = value_81;
            }
        }
        public static read(input: thrift.TProtocol): CheckName__Result {
            return new CheckName__Result(CheckName__ResultCodec.decode(input));
        }
        public static write(args: ICheckName__ResultArgs, output: thrift.TProtocol): void {
            return CheckName__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return CheckName__ResultCodec.encode(this, output);
        }
    }
    export interface ICheckOptional__Result {
        success?: string;
    }
    export interface ICheckOptional__ResultArgs {
        success?: string;
    }
    export const CheckOptional__ResultCodec: thrift.IStructCodec<ICheckOptional__ResultArgs, ICheckOptional__Result> = {
        encode(args: ICheckOptional__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: args.success
            };
            output.writeStructBegin("CheckOptional__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.STRING, 0);
                output.writeString(obj.success);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): ICheckOptional__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.STRING) {
                            const value_82: string = input.readString();
                            _args.success = value_82;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class CheckOptional__Result extends thrift.StructLike implements ICheckOptional__Result {
        public success?: string;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: ICheckOptional__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_83: string = args.success;
                this.success = value_83;
            }
        }
        public static read(input: thrift.TProtocol): CheckOptional__Result {
            return new CheckOptional__Result(CheckOptional__ResultCodec.decode(input));
        }
        public static write(args: ICheckOptional__ResultArgs, output: thrift.TProtocol): void {
            return CheckOptional__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return CheckOptional__ResultCodec.encode(this, output);
        }
    }
    export interface IMapOneList__Result {
        success?: Array<number>;
    }
    export interface IMapOneList__ResultArgs {
        success?: Array<number>;
    }
    export const MapOneList__ResultCodec: thrift.IStructCodec<IMapOneList__ResultArgs, IMapOneList__Result> = {
        encode(args: IMapOneList__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: args.success
            };
            output.writeStructBegin("MapOneList__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.LIST, 0);
                output.writeListBegin(thrift.TType.I32, obj.success.length);
                obj.success.forEach((value_84: number): void => {
                    output.writeI32(value_84);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IMapOneList__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.LIST) {
                            const value_85: Array<number> = new Array<number>();
                            const metadata_5: thrift.IThriftList = input.readListBegin();
                            const size_5: number = metadata_5.size;
                            for (let i_5: number = 0; i_5 < size_5; i_5++) {
                                const value_86: number = input.readI32();
                                value_85.push(value_86);
                            }
                            input.readListEnd();
                            _args.success = value_85;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class MapOneList__Result extends thrift.StructLike implements IMapOneList__Result {
        public success?: Array<number>;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IMapOneList__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_87: Array<number> = new Array<number>();
                args.success.forEach((value_88: number): void => {
                    const value_89: number = value_88;
                    value_87.push(value_89);
                });
                this.success = value_87;
            }
        }
        public static read(input: thrift.TProtocol): MapOneList__Result {
            return new MapOneList__Result(MapOneList__ResultCodec.decode(input));
        }
        public static write(args: IMapOneList__ResultArgs, output: thrift.TProtocol): void {
            return MapOneList__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return MapOneList__ResultCodec.encode(this, output);
        }
    }
    export interface IMapValues__Result {
        success?: Array<number>;
    }
    export interface IMapValues__ResultArgs {
        success?: Array<number>;
    }
    export const MapValues__ResultCodec: thrift.IStructCodec<IMapValues__ResultArgs, IMapValues__Result> = {
        encode(args: IMapValues__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: args.success
            };
            output.writeStructBegin("MapValues__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.LIST, 0);
                output.writeListBegin(thrift.TType.I32, obj.success.length);
                obj.success.forEach((value_90: number): void => {
                    output.writeI32(value_90);
                });
                output.writeListEnd();
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IMapValues__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.LIST) {
                            const value_91: Array<number> = new Array<number>();
                            const metadata_6: thrift.IThriftList = input.readListBegin();
                            const size_6: number = metadata_6.size;
                            for (let i_6: number = 0; i_6 < size_6; i_6++) {
                                const value_92: number = input.readI32();
                                value_91.push(value_92);
                            }
                            input.readListEnd();
                            _args.success = value_91;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class MapValues__Result extends thrift.StructLike implements IMapValues__Result {
        public success?: Array<number>;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IMapValues__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_93: Array<number> = new Array<number>();
                args.success.forEach((value_94: number): void => {
                    const value_95: number = value_94;
                    value_93.push(value_95);
                });
                this.success = value_93;
            }
        }
        public static read(input: thrift.TProtocol): MapValues__Result {
            return new MapValues__Result(MapValues__ResultCodec.decode(input));
        }
        public static write(args: IMapValues__ResultArgs, output: thrift.TProtocol): void {
            return MapValues__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return MapValues__ResultCodec.encode(this, output);
        }
    }
    export interface IListToMap__Result {
        success?: Map<string, string>;
    }
    export interface IListToMap__ResultArgs {
        success?: Map<string, string>;
    }
    export const ListToMap__ResultCodec: thrift.IStructCodec<IListToMap__ResultArgs, IListToMap__Result> = {
        encode(args: IListToMap__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: args.success
            };
            output.writeStructBegin("ListToMap__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.MAP, 0);
                output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, obj.success.size);
                obj.success.forEach((value_96: string, key_5: string): void => {
                    output.writeString(key_5);
                    output.writeString(value_96);
                });
                output.writeMapEnd();
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IListToMap__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.MAP) {
                            const value_97: Map<string, string> = new Map<string, string>();
                            const metadata_7: thrift.IThriftMap = input.readMapBegin();
                            const size_7: number = metadata_7.size;
                            for (let i_7: number = 0; i_7 < size_7; i_7++) {
                                const key_6: string = input.readString();
                                const value_98: string = input.readString();
                                value_97.set(key_6, value_98);
                            }
                            input.readMapEnd();
                            _args.success = value_97;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class ListToMap__Result extends thrift.StructLike implements IListToMap__Result {
        public success?: Map<string, string>;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IListToMap__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_99: Map<string, string> = new Map<string, string>();
                args.success.forEach((value_100: string, key_7: string): void => {
                    const value_101: string = value_100;
                    const key_8: string = key_7;
                    value_99.set(key_8, value_101);
                });
                this.success = value_99;
            }
        }
        public static read(input: thrift.TProtocol): ListToMap__Result {
            return new ListToMap__Result(ListToMap__ResultCodec.decode(input));
        }
        public static write(args: IListToMap__ResultArgs, output: thrift.TProtocol): void {
            return ListToMap__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return ListToMap__ResultCodec.encode(this, output);
        }
    }
    export interface IFetchThing__Result {
        success?: common.ICommonStruct;
    }
    export interface IFetchThing__ResultArgs {
        success?: common.ICommonStructArgs;
    }
    export const FetchThing__ResultCodec: thrift.IStructCodec<IFetchThing__ResultArgs, IFetchThing__Result> = {
        encode(args: IFetchThing__ResultArgs, output: thrift.TProtocol): void {
            const obj = {
                success: args.success
            };
            output.writeStructBegin("FetchThing__Result");
            if (obj.success != null) {
                output.writeFieldBegin("success", thrift.TType.STRUCT, 0);
                common.CommonStructCodec.encode(obj.success, output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IFetchThing__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.STRUCT) {
                            const value_102: common.ICommonStruct = common.CommonStructCodec.decode(input);
                            _args.success = value_102;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class FetchThing__Result extends thrift.StructLike implements IFetchThing__Result {
        public success?: common.ICommonStruct;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IFetchThing__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_103: common.ICommonStruct = new common.CommonStruct(args.success);
                this.success = value_103;
            }
        }
        public static read(input: thrift.TProtocol): FetchThing__Result {
            return new FetchThing__Result(FetchThing__ResultCodec.decode(input));
        }
        public static write(args: IFetchThing__ResultArgs, output: thrift.TProtocol): void {
            return FetchThing__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return FetchThing__ResultCodec.encode(this, output);
        }
    }
    export interface IZip__Result {
        success?: void;
    }
    export interface IZip__ResultArgs {
        success?: void;
    }
    export const Zip__ResultCodec: thrift.IStructCodec<IZip__ResultArgs, IZip__Result> = {
        encode(args: IZip__ResultArgs, output: thrift.TProtocol): void {
            output.writeStructBegin("Zip__Result");
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        },
        decode(input: thrift.TProtocol): IZip__Result {
            let _args: any = {};
            input.readStructBegin();
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.VOID) {
                            input.skip(fieldType);
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return {
                success: _args.success
            };
        }
    };
    export class Zip__Result extends thrift.StructLike implements IZip__Result {
        public success?: void;
        public readonly _annotations: thrift.IThriftAnnotations = {};
        public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
        constructor(args: IZip__ResultArgs = {}) {
            super();
            if (args.success != null) {
                const value_104: void = undefined;
                this.success = value_104;
            }
        }
        public static read(input: thrift.TProtocol): Zip__Result {
            return new Zip__Result(Zip__ResultCodec.decode(input));
        }
        public static write(args: IZip__ResultArgs, output: thrift.TProtocol): void {
            return Zip__ResultCodec.encode(args, output);
        }
        public write(output: thrift.TProtocol): void {
            return Zip__ResultCodec.encode(this, output);
        }
    }
    export class Client<Context = any> extends shared.SharedService.Client<Context> {
        public static readonly serviceName: string = serviceName;
        public static readonly annotations: thrift.IThriftAnnotations = annotations;
        public static readonly methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
        public static readonly methodNames: Array<string> = methodNames;
        public readonly _serviceName: string = serviceName;
        public readonly _annotations: thrift.IThriftAnnotations = annotations;
        public readonly _methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
        public readonly _methodNames: Array<string> = methodNames;
        constructor(connection: thrift.IThriftConnection<Context>) {
            super(connection);
        }
        public ping(context?: Context): Promise<void> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("ping", thrift.MessageType.CALL, this.incrementRequestId());
            const args: IPing__ArgsArgs = {};
            Ping__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "ping") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: IPing__Result = Ping__ResultCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.resolve(result.success);
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public add(num1: number, num2: number, context?: Context): Promise<number> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("add", thrift.MessageType.CALL, this.incrementRequestId());
            const args: IAdd__ArgsArgs = { num1, num2 };
            Add__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "add") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: IAdd__Result = Add__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.exp != null) {
                                return Promise.reject(result.exp);
                            }
                            else if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "add failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public addInt64(num1: number | string | thrift.Int64, num2: number | string | thrift.Int64, context?: Context): Promise<thrift.Int64> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("addInt64", thrift.MessageType.CALL, this.incrementRequestId());
            const args: IAddInt64__ArgsArgs = { num1, num2 };
            AddInt64__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "addInt64") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: IAddInt64__Result = AddInt64__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "addInt64 failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public addWithContext(num1: number, num2: number, context?: Context): Promise<number> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("addWithContext", thrift.MessageType.CALL, this.incrementRequestId());
            const args: IAddWithContext__ArgsArgs = { num1, num2 };
            AddWithContext__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "addWithContext") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: IAddWithContext__Result = AddWithContext__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "addWithContext failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public calculate(logid: number, work: IWorkArgs, context?: Context): Promise<number> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("calculate", thrift.MessageType.CALL, this.incrementRequestId());
            const args: ICalculate__ArgsArgs = { logid, work };
            Calculate__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "calculate") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: ICalculate__Result = Calculate__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.ouch != null) {
                                return Promise.reject(result.ouch);
                            }
                            else if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "calculate failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public echoBinary(word: string | Buffer, context?: Context): Promise<string> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("echoBinary", thrift.MessageType.CALL, this.incrementRequestId());
            const args: IEchoBinary__ArgsArgs = { word };
            EchoBinary__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "echoBinary") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: IEchoBinary__Result = EchoBinary__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "echoBinary failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public echoString(word: string, context?: Context): Promise<string> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("echoString", thrift.MessageType.CALL, this.incrementRequestId());
            const args: IEchoString__ArgsArgs = { word };
            EchoString__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "echoString") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: IEchoString__Result = EchoString__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "echoString failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public checkName(choice: IChoiceArgs, context?: Context): Promise<string> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("checkName", thrift.MessageType.CALL, this.incrementRequestId());
            const args: ICheckName__ArgsArgs = { choice };
            CheckName__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "checkName") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: ICheckName__Result = CheckName__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "checkName failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public checkOptional(type?: string, context?: Context): Promise<string> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("checkOptional", thrift.MessageType.CALL, this.incrementRequestId());
            const args: ICheckOptional__ArgsArgs = { type };
            CheckOptional__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "checkOptional") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: ICheckOptional__Result = CheckOptional__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "checkOptional failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public mapOneList(arg: Array<number>, context?: Context): Promise<Array<number>> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("mapOneList", thrift.MessageType.CALL, this.incrementRequestId());
            const args: IMapOneList__ArgsArgs = { arg };
            MapOneList__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "mapOneList") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: IMapOneList__Result = MapOneList__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "mapOneList failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public mapValues(arg: Map<string, number>, context?: Context): Promise<Array<number>> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("mapValues", thrift.MessageType.CALL, this.incrementRequestId());
            const args: IMapValues__ArgsArgs = { arg };
            MapValues__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "mapValues") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: IMapValues__Result = MapValues__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "mapValues failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public listToMap(arg: Array<Array<string>>, context?: Context): Promise<Map<string, string>> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("listToMap", thrift.MessageType.CALL, this.incrementRequestId());
            const args: IListToMap__ArgsArgs = { arg };
            ListToMap__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "listToMap") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: IListToMap__Result = ListToMap__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "listToMap failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public fetchThing(context?: Context): Promise<common.ICommonStruct> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("fetchThing", thrift.MessageType.CALL, this.incrementRequestId());
            const args: IFetchThing__ArgsArgs = {};
            FetchThing__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "fetchThing") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: IFetchThing__Result = FetchThing__ResultCodec.decode(input);
                            input.readMessageEnd();
                            if (result.success != null) {
                                return Promise.resolve(result.success);
                            }
                            else {
                                return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "fetchThing failed: unknown result"));
                            }
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
        public zip(context?: Context): Promise<void> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("zip", thrift.MessageType.CALL, this.incrementRequestId());
            const args: IZip__ArgsArgs = {};
            Zip__ArgsCodec.encode(args, output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "zip") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        else {
                            const result: IZip__Result = Zip__ResultCodec.decode(input);
                            input.readMessageEnd();
                            return Promise.resolve(result.success);
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
    }
    export interface ILocalHandler<Context = any> {
        ping(context?: Context): void | Promise<void>;
        add(num1: number, num2: number, context?: Context): number | Promise<number>;
        addInt64(num1: thrift.Int64, num2: thrift.Int64, context?: Context): (number | string | thrift.Int64) | Promise<number | string | thrift.Int64>;
        addWithContext(num1: number, num2: number, context?: Context): number | Promise<number>;
        calculate(logid: number, work: IWork, context?: Context): number | Promise<number>;
        echoBinary(word: Buffer, context?: Context): string | Promise<string>;
        echoString(word: string, context?: Context): string | Promise<string>;
        checkName(choice: IChoice, context?: Context): string | Promise<string>;
        checkOptional(type?: string, context?: Context): string | Promise<string>;
        mapOneList(arg: Array<number>, context?: Context): Array<number> | Promise<Array<number>>;
        mapValues(arg: Map<string, number>, context?: Context): Array<number> | Promise<Array<number>>;
        listToMap(arg: Array<Array<string>>, context?: Context): Map<string, string> | Promise<Map<string, string>>;
        fetchThing(context?: Context): common.ICommonStructArgs | Promise<common.ICommonStructArgs>;
        zip(context?: Context): void | Promise<void>;
    }
    export type IHandler<Context = any> = ILocalHandler<Context> & shared.SharedService.IHandler<Context>;
    export class Processor<Context = any> extends shared.SharedService.Processor<Context> {
        protected readonly _handler: IHandler<Context>;
        public static readonly serviceName: string = serviceName;
        public static readonly annotations: thrift.IThriftAnnotations = annotations;
        public static readonly methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
        public static readonly methodNames: Array<string> = methodNames;
        public readonly _serviceName: string = serviceName;
        public readonly _annotations: thrift.IThriftAnnotations = annotations;
        public readonly _methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
        public readonly _methodNames: Array<string> = methodNames;
        constructor(handler: IHandler<Context>) {
            super({
                getStruct: handler.getStruct,
                getUnion: handler.getUnion
            });
            this._handler = handler;
        }
        public process(input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<Buffer>((resolve, reject): void => {
                const metadata: thrift.IThriftMessage = input.readMessageBegin();
                const fieldName: string = metadata.fieldName;
                const requestId: number = metadata.requestId;
                const methodName: string = "process_" + fieldName;
                switch (methodName) {
                    case "process_getStruct": {
                        resolve(this.process_getStruct(requestId, input, output, context));
                        break;
                    }
                    case "process_getUnion": {
                        resolve(this.process_getUnion(requestId, input, output, context));
                        break;
                    }
                    case "process_ping": {
                        resolve(this.process_ping(requestId, input, output, context));
                        break;
                    }
                    case "process_add": {
                        resolve(this.process_add(requestId, input, output, context));
                        break;
                    }
                    case "process_addInt64": {
                        resolve(this.process_addInt64(requestId, input, output, context));
                        break;
                    }
                    case "process_addWithContext": {
                        resolve(this.process_addWithContext(requestId, input, output, context));
                        break;
                    }
                    case "process_calculate": {
                        resolve(this.process_calculate(requestId, input, output, context));
                        break;
                    }
                    case "process_echoBinary": {
                        resolve(this.process_echoBinary(requestId, input, output, context));
                        break;
                    }
                    case "process_echoString": {
                        resolve(this.process_echoString(requestId, input, output, context));
                        break;
                    }
                    case "process_checkName": {
                        resolve(this.process_checkName(requestId, input, output, context));
                        break;
                    }
                    case "process_checkOptional": {
                        resolve(this.process_checkOptional(requestId, input, output, context));
                        break;
                    }
                    case "process_mapOneList": {
                        resolve(this.process_mapOneList(requestId, input, output, context));
                        break;
                    }
                    case "process_mapValues": {
                        resolve(this.process_mapValues(requestId, input, output, context));
                        break;
                    }
                    case "process_listToMap": {
                        resolve(this.process_listToMap(requestId, input, output, context));
                        break;
                    }
                    case "process_fetchThing": {
                        resolve(this.process_fetchThing(requestId, input, output, context));
                        break;
                    }
                    case "process_zip": {
                        resolve(this.process_zip(requestId, input, output, context));
                        break;
                    }
                    default: {
                        input.skip(thrift.TType.STRUCT);
                        input.readMessageEnd();
                        const errMessage = "Unknown function " + fieldName;
                        const err = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                        output.writeMessageBegin(fieldName, thrift.MessageType.EXCEPTION, requestId);
                        thrift.TApplicationExceptionCodec.encode(err, output);
                        output.writeMessageEnd();
                        resolve(output.flush());
                        break;
                    }
                }
            });
        }
        public process_ping(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<void>((resolve, reject): void => {
                try {
                    input.readMessageEnd();
                    resolve(this._handler.ping(context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: void): Buffer => {
                const result: IPing__ResultArgs = { success: data };
                output.writeMessageBegin("ping", thrift.MessageType.REPLY, requestId);
                Ping__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("ping", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
        public process_add(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<number>((resolve, reject): void => {
                try {
                    const args: IAdd__Args = Add__ArgsCodec.decode(input);
                    input.readMessageEnd();
                    resolve(this._handler.add(args.num1, args.num2, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: number): Buffer => {
                const result: IAdd__ResultArgs = { success: data };
                output.writeMessageBegin("add", thrift.MessageType.REPLY, requestId);
                Add__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                if (err instanceof operation.JankyResult) {
                    const result: IAdd__ResultArgs = { exp: err };
                    output.writeMessageBegin("add", thrift.MessageType.REPLY, requestId);
                    Add__ResultCodec.encode(result, output);
                    output.writeMessageEnd();
                    return output.flush();
                }
                else {
                    const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("add", thrift.MessageType.EXCEPTION, requestId);
                    thrift.TApplicationExceptionCodec.encode(result, output);
                    output.writeMessageEnd();
                    return output.flush();
                }
            });
        }
        public process_addInt64(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<number | string | thrift.Int64>((resolve, reject): void => {
                try {
                    const args: IAddInt64__Args = AddInt64__ArgsCodec.decode(input);
                    input.readMessageEnd();
                    resolve(this._handler.addInt64(args.num1, args.num2, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: number | string | thrift.Int64): Buffer => {
                const result: IAddInt64__ResultArgs = { success: data };
                output.writeMessageBegin("addInt64", thrift.MessageType.REPLY, requestId);
                AddInt64__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addInt64", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
        public process_addWithContext(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<number>((resolve, reject): void => {
                try {
                    const args: IAddWithContext__Args = AddWithContext__ArgsCodec.decode(input);
                    input.readMessageEnd();
                    resolve(this._handler.addWithContext(args.num1, args.num2, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: number): Buffer => {
                const result: IAddWithContext__ResultArgs = { success: data };
                output.writeMessageBegin("addWithContext", thrift.MessageType.REPLY, requestId);
                AddWithContext__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addWithContext", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
        public process_calculate(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<number>((resolve, reject): void => {
                try {
                    const args: ICalculate__Args = Calculate__ArgsCodec.decode(input);
                    input.readMessageEnd();
                    resolve(this._handler.calculate(args.logid, args.work, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: number): Buffer => {
                const result: ICalculate__ResultArgs = { success: data };
                output.writeMessageBegin("calculate", thrift.MessageType.REPLY, requestId);
                Calculate__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                if (err instanceof operation.JankyOperation) {
                    const result: ICalculate__ResultArgs = { ouch: err };
                    output.writeMessageBegin("calculate", thrift.MessageType.REPLY, requestId);
                    Calculate__ResultCodec.encode(result, output);
                    output.writeMessageEnd();
                    return output.flush();
                }
                else {
                    const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("calculate", thrift.MessageType.EXCEPTION, requestId);
                    thrift.TApplicationExceptionCodec.encode(result, output);
                    output.writeMessageEnd();
                    return output.flush();
                }
            });
        }
        public process_echoBinary(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<string>((resolve, reject): void => {
                try {
                    const args: IEchoBinary__Args = EchoBinary__ArgsCodec.decode(input);
                    input.readMessageEnd();
                    resolve(this._handler.echoBinary(args.word, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: string): Buffer => {
                const result: IEchoBinary__ResultArgs = { success: data };
                output.writeMessageBegin("echoBinary", thrift.MessageType.REPLY, requestId);
                EchoBinary__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("echoBinary", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
        public process_echoString(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<string>((resolve, reject): void => {
                try {
                    const args: IEchoString__Args = EchoString__ArgsCodec.decode(input);
                    input.readMessageEnd();
                    resolve(this._handler.echoString(args.word, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: string): Buffer => {
                const result: IEchoString__ResultArgs = { success: data };
                output.writeMessageBegin("echoString", thrift.MessageType.REPLY, requestId);
                EchoString__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("echoString", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
        public process_checkName(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<string>((resolve, reject): void => {
                try {
                    const args: ICheckName__Args = CheckName__ArgsCodec.decode(input);
                    input.readMessageEnd();
                    resolve(this._handler.checkName(args.choice, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: string): Buffer => {
                const result: ICheckName__ResultArgs = { success: data };
                output.writeMessageBegin("checkName", thrift.MessageType.REPLY, requestId);
                CheckName__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("checkName", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
        public process_checkOptional(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<string>((resolve, reject): void => {
                try {
                    const args: ICheckOptional__Args = CheckOptional__ArgsCodec.decode(input);
                    input.readMessageEnd();
                    resolve(this._handler.checkOptional(args.type, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: string): Buffer => {
                const result: ICheckOptional__ResultArgs = { success: data };
                output.writeMessageBegin("checkOptional", thrift.MessageType.REPLY, requestId);
                CheckOptional__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("checkOptional", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
        public process_mapOneList(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<Array<number>>((resolve, reject): void => {
                try {
                    const args: IMapOneList__Args = MapOneList__ArgsCodec.decode(input);
                    input.readMessageEnd();
                    resolve(this._handler.mapOneList(args.arg, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: Array<number>): Buffer => {
                const result: IMapOneList__ResultArgs = { success: data };
                output.writeMessageBegin("mapOneList", thrift.MessageType.REPLY, requestId);
                MapOneList__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("mapOneList", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
        public process_mapValues(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<Array<number>>((resolve, reject): void => {
                try {
                    const args: IMapValues__Args = MapValues__ArgsCodec.decode(input);
                    input.readMessageEnd();
                    resolve(this._handler.mapValues(args.arg, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: Array<number>): Buffer => {
                const result: IMapValues__ResultArgs = { success: data };
                output.writeMessageBegin("mapValues", thrift.MessageType.REPLY, requestId);
                MapValues__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("mapValues", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
        public process_listToMap(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<Map<string, string>>((resolve, reject): void => {
                try {
                    const args: IListToMap__Args = ListToMap__ArgsCodec.decode(input);
                    input.readMessageEnd();
                    resolve(this._handler.listToMap(args.arg, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: Map<string, string>): Buffer => {
                const result: IListToMap__ResultArgs = { success: data };
                output.writeMessageBegin("listToMap", thrift.MessageType.REPLY, requestId);
                ListToMap__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("listToMap", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
        public process_fetchThing(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<common.ICommonStructArgs>((resolve, reject): void => {
                try {
                    input.readMessageEnd();
                    resolve(this._handler.fetchThing(context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: common.ICommonStructArgs): Buffer => {
                const result: IFetchThing__ResultArgs = { success: data };
                output.writeMessageBegin("fetchThing", thrift.MessageType.REPLY, requestId);
                FetchThing__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("fetchThing", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
        public process_zip(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<void>((resolve, reject): void => {
                try {
                    input.readMessageEnd();
                    resolve(this._handler.zip(context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: void): Buffer => {
                const result: IZip__ResultArgs = { success: data };
                output.writeMessageBegin("zip", thrift.MessageType.REPLY, requestId);
                Zip__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("zip", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            });
        }
    }
}
