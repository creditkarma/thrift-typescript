/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.1.1
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "test-lib";
export const SHARED_INT: number = 45;
export interface ICodeArgs {
    status?: number | Int64;
}
export class Code {
    public status?: Int64;
    constructor(args?: ICodeArgs) {
        if (args != null && args.status != null) {
            if (typeof args.status === "number") {
                this.status = new Int64(args.status);
            }
            else {
                this.status = args.status;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Code");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.status);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Code {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_1: Int64 = input.readI64();
                        _args.status = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Code(_args);
    }
}
export interface ISharedStructArgs {
    code: Code;
    value: string;
}
export class SharedStruct {
    public code: Code;
    public value: string;
    constructor(args: ISharedStructArgs) {
        if (args != null && args.code != null) {
            this.code = args.code;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[code] is unset!");
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[value] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SharedStruct");
        if (this.code != null) {
            output.writeFieldBegin("code", thrift.Thrift.Type.STRUCT, 1);
            this.code.write(output);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.value);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SharedStruct {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: Code = Code.read(input);
                        _args.code = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.value = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.code !== undefined && _args.value !== undefined) {
            return new SharedStruct(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read SharedStruct from input");
        }
    }
}
export interface ISharedUnionArgs {
    option1?: string;
    option2?: string;
}
export class SharedUnion {
    public option1?: string;
    public option2?: string;
    constructor(args?: ISharedUnionArgs) {
        let _fieldsSet: number = 0;
        if (args != null) {
            if (args.option1 != null) {
                _fieldsSet++;
                this.option1 = args.option1;
            }
            if (args.option2 != null) {
                _fieldsSet++;
                this.option2 = args.option2;
            }
            if (_fieldsSet > 1) {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with more than one set value!");
            }
            else if (_fieldsSet < 1) {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with no set value!");
            }
        }
    }
    public static fromOption1(option1: string): SharedUnion {
        return new SharedUnion({ option1 });
    }
    public static fromOption2(option2: string): SharedUnion {
        return new SharedUnion({ option2 });
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SharedUnion");
        if (this.option1 != null) {
            output.writeFieldBegin("option1", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.option1);
            output.writeFieldEnd();
        }
        if (this.option2 != null) {
            output.writeFieldBegin("option2", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.option2);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SharedUnion {
        let _fieldsSet: number = 0;
        let _returnValue: SharedUnion | null = null;
        input.readStructBegin();
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        _fieldsSet++;
                        const value_4: string = input.readString();
                        _returnValue = SharedUnion.fromOption1(value_4);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        _fieldsSet++;
                        const value_5: string = input.readString();
                        _returnValue = SharedUnion.fromOption2(value_5);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with more than one set value!");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.INVALID_DATA, "Cannot read a TUnion with no set value!");
        }
        if (_returnValue !== null) {
            return _returnValue;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read data for TUnion");
        }
    }
}
export namespace SharedService {
    export interface IGetStructArgsArgs {
        key: number;
    }
    export class GetStructArgs {
        public key: number;
        constructor(args: IGetStructArgsArgs) {
            if (args != null && args.key != null) {
                this.key = args.key;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[key] is unset!");
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("GetStructArgs");
            if (this.key != null) {
                output.writeFieldBegin("key", thrift.Thrift.Type.I32, 1);
                output.writeI32(this.key);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): GetStructArgs {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.Thrift.Type.I32) {
                            const value_6: number = input.readI32();
                            _args.key = value_6;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.key !== undefined) {
                return new GetStructArgs(_args);
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetStructArgs from input");
            }
        }
    }
    export interface IGetUnionArgsArgs {
        index: number;
    }
    export class GetUnionArgs {
        public index: number;
        constructor(args: IGetUnionArgsArgs) {
            if (args != null && args.index != null) {
                this.index = args.index;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[index] is unset!");
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("GetUnionArgs");
            if (this.index != null) {
                output.writeFieldBegin("index", thrift.Thrift.Type.I32, 1);
                output.writeI32(this.index);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): GetUnionArgs {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.Thrift.Type.I32) {
                            const value_7: number = input.readI32();
                            _args.index = value_7;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.index !== undefined) {
                return new GetUnionArgs(_args);
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetUnionArgs from input");
            }
        }
    }
    export interface IGetStructResultArgs {
        success?: SharedStruct;
    }
    export class GetStructResult {
        public success?: SharedStruct;
        constructor(args?: IGetStructResultArgs) {
            if (args != null && args.success != null) {
                this.success = args.success;
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("GetStructResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): GetStructResult {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.Thrift.Type.STRUCT) {
                            const value_8: SharedStruct = SharedStruct.read(input);
                            _args.success = value_8;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return new GetStructResult(_args);
        }
    }
    export interface IGetUnionResultArgs {
        success?: SharedUnion;
    }
    export class GetUnionResult {
        public success?: SharedUnion;
        constructor(args?: IGetUnionResultArgs) {
            if (args != null && args.success != null) {
                this.success = args.success;
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("GetUnionResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): GetUnionResult {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.Thrift.Type.STRUCT) {
                            const value_9: SharedUnion = SharedUnion.read(input);
                            _args.success = value_9;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return new GetUnionResult(_args);
        }
    }
    export class Client {
        public _seqid: number;
        public _reqs: {
            [name: number]: (err: Error | object | undefined, val?: any) => void;
        };
        public output: thrift.TTransport;
        public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
        constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
            this._seqid = 0;
            this._reqs = {};
            this.output = output;
            this.protocol = protocol;
        }
        public incrementSeqId(): number {
            return this._seqid += 1;
        }
        public getStruct(key: number): Promise<SharedStruct> {
            const requestId: number = this.incrementSeqId();
            return new Promise<SharedStruct>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_getStruct(key, requestId);
            });
        }
        public getUnion(index: number): Promise<SharedUnion> {
            const requestId: number = this.incrementSeqId();
            return new Promise<SharedUnion>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_getUnion(index, requestId);
            });
        }
        public send_getStruct(key: number, requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("getStruct", thrift.Thrift.MessageType.CALL, requestId);
            const args: GetStructArgs = new GetStructArgs({ key });
            args.write(output);
            output.writeMessageEnd();
            this.output.flush();
            return;
        }
        public send_getUnion(index: number, requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("getUnion", thrift.Thrift.MessageType.CALL, requestId);
            const args: GetUnionArgs = new GetUnionArgs({ index });
            args.write(output);
            output.writeMessageEnd();
            this.output.flush();
            return;
        }
        public recv_getStruct(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
            const noop = (): any => null;
            const callback = this._reqs[requestId] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            else {
                const result: GetStructResult = GetStructResult.read(input);
                input.readMessageEnd();
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getStruct failed: unknown result"));
                }
            }
        }
        public recv_getUnion(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
            const noop = (): any => null;
            const callback = this._reqs[requestId] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            else {
                const result: GetUnionResult = GetUnionResult.read(input);
                input.readMessageEnd();
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getUnion failed: unknown result"));
                }
            }
        }
    }
    export interface IHandler {
        getStruct(key: number): SharedStruct | Promise<SharedStruct>;
        getUnion(index: number): SharedUnion | Promise<SharedUnion>;
    }
    export class Processor {
        public _handler: IHandler;
        constructor(handler: IHandler) {
            this._handler = handler;
        }
        public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
            const metadata: thrift.TMessage = input.readMessageBegin();
            const fname: string = metadata.fname;
            const requestId: number = metadata.rseqid;
            const methodName: string = "process_" + fname;
            switch (methodName) {
                case "process_getStruct": {
                    this.process_getStruct(requestId, input, output);
                    return;
                }
                case "process_getUnion": {
                    this.process_getUnion(requestId, input, output);
                    return;
                }
                default: {
                    input.skip(thrift.Thrift.Type.STRUCT);
                    input.readMessageEnd();
                    const errMessage = "Unknown function " + fname;
                    const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                    output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                    err.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            }
        }
        public process_getStruct(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
            new Promise<SharedStruct>((resolve, reject): void => {
                try {
                    const args: GetStructArgs = GetStructArgs.read(input);
                    input.readMessageEnd();
                    resolve(this._handler.getStruct(args.key));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: SharedStruct): void => {
                const result: GetStructResult = new GetStructResult({ success: data });
                output.writeMessageBegin("getStruct", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }).catch((err: Error): void => {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getStruct", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            });
        }
        public process_getUnion(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
            new Promise<SharedUnion>((resolve, reject): void => {
                try {
                    const args: GetUnionArgs = GetUnionArgs.read(input);
                    input.readMessageEnd();
                    resolve(this._handler.getUnion(args.index));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: SharedUnion): void => {
                const result: GetUnionResult = new GetUnionResult({ success: data });
                output.writeMessageBegin("getUnion", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }).catch((err: Error): void => {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getUnion", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            });
        }
    }
}
