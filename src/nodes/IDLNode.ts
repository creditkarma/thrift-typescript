import {
  addSyntheticLeadingComment,
  createModuleBlock,
  createModuleDeclaration,
  ModuleDeclaration,
  NodeFlags,
  SyntaxKind,
} from 'typescript'

import ConstNode from './ConstNode'
import EnumNode from './EnumNode'
import ExceptionNode from './ExceptionNode'
import InterfaceNode from './InterfaceNode'
import NamespaceNode from './NamespaceNode'
import StructNode from './StructNode'
import TypedefNode from './TypedefNode'
import UnionNode from './UnionNode'

import { tokens } from '../ast/tokens'

export default class IDLNode {
  public filename: string
  public namespace: NamespaceNode
  public typedefs: TypedefNode[]
  public consts: ConstNode[]
  public enums: EnumNode[]
  public interfaces: InterfaceNode[]
  public structs: StructNode[]
  public unions: UnionNode[]
  public exceptions: ExceptionNode[]

  constructor(args) {
    this.filename = args.filename
    this.namespace = args.namespace
    this.typedefs = args.typedefs
    this.consts = args.consts
    this.enums = args.enums
    this.interfaces = args.interfaces
    this.structs = args.structs
    this.unions = args.unions
    this.exceptions = args.exceptions
  }

  public toAST(): ModuleDeclaration {
    const namespace = this.namespace.toAST()
    const types = this.typedefs.map((typedef) => typedef.toAST())
    const constants = this.consts.map((constant) => constant.toAST())
    const enums = this.enums.map((enu) => enu.toAST())
    const interfaces = this.interfaces.map((iface) => iface.toAST())
    const structs = this.structs.map((struct) => struct.toAST())
    const unions = this.unions.map((union) => union.toAST())
    const exceptions = this.exceptions.map((exception) => exception.toAST())

    // TODO: Have to investigate ordering here, it might matter
    const namespaceBlock = createModuleBlock([
      ...types,
      ...enums,
      ...interfaces,
      ...structs,
      ...unions,
      ...exceptions,
      ...constants,
    ])

    let moduleDec = createModuleDeclaration(undefined, [tokens.export], namespace, namespaceBlock, NodeFlags.Namespace)

    moduleDec = addSyntheticLeadingComment(moduleDec, SyntaxKind.SingleLineCommentTrivia,
      ` Generated by ${this.filename}`, false)

    return moduleDec
  }
}
